QUnit.config.reorder=false;window.onload=function(){function g(b){var a=window.location.href;return a.substr(0,a.lastIndexOf("/")+1)+(b||"")}function i(a){var b=window.setInterval(function(){if(!respond.queue.length){window.clearInterval(b);a()}},50)}if(!window.opener){document.documentElement.className="launcher";document.getElementById("launcher").innerHTML='<p>Tests must run in a popup window. <a href="suite.html" id="suitelink">Open test suite</a></p>';document.getElementById("suitelink").onclick=function(){window.open(location.href+"?"+Math.random(),"win","width=800,height=600,scrollbars=1,resizable=1");return false}}else{var l=document.getElementById("testelem");function h(){return l.offsetWidth}function j(){return l.offsetHeight}var k=(function(){var b,d=3,a=document.createElement("div"),c=a.getElementsByTagName("i");while(a.innerHTML="<!--[if gt IE "+(++d)+"]><i></i><![endif]-->",c[0]){}return d>4?d:b}());window.moveTo(0,0);asyncTest("Styles not nested in media queries apply as expected",function(){window.resizeTo(200,800);setTimeout(function(){strictEqual(h(),50,"testelem is 50px wide when window is 200px wide");start()},900)});asyncTest("styles within min-width media queries apply properly",function(){window.resizeTo(520,800);setTimeout(function(){strictEqual(h(),150,"testelem is 150px wide when window is 500px wide");start()},900)});if(k>=7){asyncTest("attribute selectors still work (where supported) after respond runs its course",function(){window.resizeTo(520,800);setTimeout(function(){strictEqual(j(),200,"testelem is 200px tall when window is 500px wide");start()},900)})}asyncTest("styles within max-width media queries apply properly",function(){window.resizeTo(300,800);setTimeout(function(){strictEqual(j(),150,"testelem is 150px tall when window is under 480px wide");start()},900)});asyncTest("min and max-width media queries that use EM units apply properly",function(){window.resizeTo(580,800);setTimeout(function(){strictEqual(h(),75,"testelem is 75px wide when window is 580px wide (between 33em and 38em)");start()},900)});asyncTest('styles within a min-width media query with an "only" keyword apply properly',function(){window.resizeTo(660,800);setTimeout(function(){strictEqual(h(),250,"testelem is 250px wide when window is 650px wide");start()},900)});asyncTest("styles within a media query with a one true query among other false queries apply properly",function(){window.resizeTo(800,800);setTimeout(function(){strictEqual(h(),350,"testelem is 350px wide when window is > 620px wide");start()},900)});asyncTest("Styles within a false media query do not apply",function(){window.resizeTo(800,800);setTimeout(function(){notStrictEqual(h(),500,"testelem is not 500px wide when window is 800px wide");start()},900)});asyncTest("stylesheets with a media query in a media attribute apply when they should",function(){window.resizeTo(1000,800);setTimeout(function(){strictEqual(h(),16,"testelem is 16px wide when window is wider than 950px");start()},900)});asyncTest("stylesheets with an EM-based media query in a media attribute apply when they should",function(){window.resizeTo(1150,800);setTimeout(function(){strictEqual(h(),25,"testelem is 25px wide when window is wider than 1100px wide. Does your screen width go that wide?");start()},900)});asyncTest("Test keyframe animation inside of media query",function(){i(function(){respond.ajax(g("test-with-keyframe.css"),function(a){ok(a.replace(respond.regex.keyframes,"").match(respond.regex.media),"A keyframe animation doesn't bust the media regex.");start()})})});asyncTest("Test comments inside of a media query",function(){i(function(){respond.ajax(g("test-with-comment.css"),function(b){var a=b.replace(respond.regex.comments,"");ok(a.match(respond.regex.media),"Comments don't bust the media regex.");ok(!a.match(/\/\*/gi),"No start comments exist in the result.");ok(!a.match(/\*\//gi),"No end comments exist in the result.");start()})})});test("Issue #242 overly agressive keyframes regex",function(){strictEqual("@media(q1){ @keyframes abc{ from{ }to{ } } } @media(q2){}".replace(respond.regex.keyframes,""),"@media(q1){  } @media(q2){}");strictEqual("@media(q1){} @keyframes abc{ from{ }to{ } } @media(q2){}".replace(respond.regex.keyframes,""),"@media(q1){}  @media(q2){}");strictEqual("@media(q1){} @media(q2){ @keyframes abc{ from{ }to{ } } }".replace(respond.regex.keyframes,""),"@media(q1){} @media(q2){  }")});test("Test spaces around min-width/max-width",function(){ok("@media only screen and (min-width: 1px) { }".match(respond.regex.maxw)===null);ok("@media only screen and ( min-width: 1px ) { }".match(respond.regex.maxw)===null);ok("@media only screen and (min-width: 1px) { }".match(respond.regex.minw).length);ok("@media only screen and ( min-width: 1px ) { }".match(respond.regex.minw).length);ok("@media only screen and (max-width: 1280px) { }".match(respond.regex.minw)===null);ok("@media only screen and ( max-width: 1280px ) { }".match(respond.regex.minw)===null);ok("@media only screen and (max-width: 1280px) { }".match(respond.regex.maxw).length);ok("@media only screen and ( max-width: 1280px ) { }".match(respond.regex.maxw).length)});test("Issue #161: spaces around inside min-width/max-width",function(){ok("@media only screen and (min-width : 1px) { }".match(respond.regex.min)!==null);ok("@media only screen and (max-width : 1px ) { }".match(respond.regex.maxw)!==null)});test("Issue #181: non-min-width and non-max-width queries",function(){var b=["(min--moz-device-pixel-ratio: 1.5)","(-moz-min-device-pixel-ratio: 1.5)","(-o-min-device-pixel-ratio: 1.5)","(-webkit-min-device-pixel-ratio: 1.5)","(min-device-pixel-ratio: 1.5)","(min-resolution: 1.5dppx)"],a,c;for(var d=0,e=b.length;d<e;d++){a="only screen and (max-width: 1319px) and "+b[d]+" {}";c=a.match(respond.regex.minmaxwh);equal(c&&c[0],"(max-width: 1319px)");equal(respond.unsupportedmq(a)[0],b[d]);equal(("only screen and (max-width: 1319px) and (min-width: 1px) and "+b[d]+" {}").replace(respond.regex.minmaxwh,"").match(respond.regex.other)[0],b[d]);equal(("only screen and (max-width: 1319px) and (min-height: 1px) and "+b[d]+" {}").replace(respond.regex.minmaxwh,"").match(respond.regex.other)[0],b[d])}});test("Issue #181: unsupported MQ tests",function(){strictEqual(respond.unsupportedmq("(min-width: 1151px)"),null);strictEqual(respond.unsupportedmq("all and (max-width: 699px) and (min-width: 520px)"),null);strictEqual(respond.unsupportedmq("print"),null);ok(respond.unsupportedmq("all and (orientation:portrait)"));ok(respond.unsupportedmq("screen and (device-aspect-ratio: 16/9)"));ok(respond.unsupportedmq("all and (color)"));ok(respond.unsupportedmq("all and (min-color: 1)"));ok(respond.unsupportedmq("all and (monochrome)"));ok(respond.unsupportedmq("print and (min-resolution: 300dpi)"));ok(respond.unsupportedmq("tv and (scan: progressive)"));ok(respond.unsupportedmq("handheld and (grid) and (device-max-height: 7em)"))});asyncTest("Issue #181: full MQ with DPR",function(){i(function(){respond.ajax(g("test-with-dpr.css"),function(a){ok(respond.unsupportedmq(a));start()})})})}};