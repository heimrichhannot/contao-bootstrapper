var moment=require("../../moment");exports.zones={setUp:function(a){moment.locale("en");moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};a()},tearDown:function(a){moment.locale("en");a()},"set zone":function(b){var a=moment();a.zone(0);b.equal(a.zone(),0,"should be able to set the zone to 0");a.zone(60);b.equal(a.zone(),60,"should be able to set the zone to 60");a.zone(-60);b.equal(a.zone(),-60,"should be able to set the zone to -60");b.done()},"set zone shorthand":function(b){var a=moment();a.zone(1);b.equal(a.zone(),60,"setting the zone to 1 should imply hours and convert to 60");a.zone(-1);b.equal(a.zone(),-60,"setting the zone to -1 should imply hours and convert to -60");a.zone(15);b.equal(a.zone(),900,"setting the zone to 15 should imply hours and convert to 900");a.zone(-15);b.equal(a.zone(),-900,"setting the zone to -15 should imply hours and convert to -900");a.zone(16);b.equal(a.zone(),16,"setting the zone to 16 should imply minutes");a.zone(-16);b.equal(a.zone(),-16,"setting the zone to -16 should imply minutes");b.done()},"set zone with string":function(b){var a=moment();a.zone("+00:00");b.equal(a.zone(),0,"set the zone with a timezone string");a.zone("2013-03-07T07:00:00-08:00");b.equal(a.zone(),480,"set the zone with a string that does not begin with the timezone");a.zone("2013-03-07T07:00:00+0100");b.equal(a.zone(),-60,"set the zone with a string that uses the +0000 syntax");a.zone("03-07-2013T07:00:00-08:00");b.equal(a.zone(),480,"set the zone with a string with a non-ISO 8601 date");b.done()},"change hours when changing the zone":function(b){var a=moment.utc([2000,0,1,6]);a.zone(0);b.equal(a.hour(),6,"UTC 6AM should be 6AM at +0000");a.zone(60);b.equal(a.hour(),5,"UTC 6AM should be 5AM at -0100");a.zone(-60);b.equal(a.hour(),7,"UTC 6AM should be 7AM at +0100");b.done()},"change minutes when changing the zone":function(b){var a=moment.utc([2000,0,1,6,31]);a.zone(0);b.equal(a.format("HH:mm"),"06:31","UTC 6:31AM should be 6:31AM at +0000");a.zone(30);b.equal(a.format("HH:mm"),"06:01","UTC 6:31AM should be 6:01AM at -0030");a.zone(-30);b.equal(a.format("HH:mm"),"07:01","UTC 6:31AM should be 7:01AM at +0030");a.zone(1380);b.equal(a.format("HH:mm"),"07:31","UTC 6:31AM should be 7:31AM at +1380");b.done()},"distance from the unix epoch":function(f){var e=moment(),d=moment(e),c=moment(e),b=moment(e),a=moment(e);d.utc();f.equal(+e,+d,"moment should equal moment.utc");c.zone(-60);f.equal(+e,+c,"moment should equal moment.zone(-60)");b.zone(480);f.equal(+e,+b,"moment should equal moment.zone(480)");a.zone(1000);f.equal(+e,+a,"moment should equal moment.zone(1000)");f.done()},"update offset after changing any values":function(c){var b=moment.updateOffset,a=moment.utc([2000,6,1]);moment.updateOffset=function(d,e){if(d.__doChange){if(+d>962409600000){d.zone(120,e)}else{d.zone(60,e)}}};c.equal(a.format("ZZ"),"+0000","should be at +0000");c.equal(a.format("HH:mm"),"00:00","should start 12AM at +0000 timezone");a.__doChange=true;a.add(1,"h");c.equal(a.format("ZZ"),"-0200","should be at -0200");c.equal(a.format("HH:mm"),"23:00","1AM at +0000 should be 11PM at -0200 timezone");a.subtract(1,"h");c.equal(a.format("ZZ"),"-0100","should be at -0100");c.equal(a.format("HH:mm"),"23:00","12AM at +0000 should be 11PM at -0100 timezone");moment.updateOffset=b;c.done()},"getters and setters":function(c){var b=moment([2011,5,20]);c.equal(b.clone().zone(120).year(2012).year(),2012,"should get and set year correctly");c.equal(b.clone().zone(120).month(1).month(),1,"should get and set month correctly");c.equal(b.clone().zone(120).date(2).date(),2,"should get and set date correctly");c.equal(b.clone().zone(120).day(1).day(),1,"should get and set day correctly");c.equal(b.clone().zone(120).hour(1).hour(),1,"should get and set hour correctly");c.equal(b.clone().zone(120).minute(1).minute(),1,"should get and set minute correctly");c.done()},getters:function(c){var b=moment.utc([2012,0,1,0,0,0]);c.equal(b.clone().zone(120).year(),2011,"should get year correctly");c.equal(b.clone().zone(120).month(),11,"should get month correctly");c.equal(b.clone().zone(120).date(),31,"should get date correctly");c.equal(b.clone().zone(120).hour(),22,"should get hour correctly");c.equal(b.clone().zone(120).minute(),0,"should get minute correctly");c.equal(b.clone().zone(-120).year(),2012,"should get year correctly");c.equal(b.clone().zone(-120).month(),0,"should get month correctly");c.equal(b.clone().zone(-120).date(),1,"should get date correctly");c.equal(b.clone().zone(-120).hour(),2,"should get hour correctly");c.equal(b.clone().zone(-120).minute(),0,"should get minute correctly");c.equal(b.clone().zone(-90).year(),2012,"should get year correctly");c.equal(b.clone().zone(-90).month(),0,"should get month correctly");c.equal(b.clone().zone(-90).date(),1,"should get date correctly");c.equal(b.clone().zone(-90).hour(),1,"should get hour correctly");c.equal(b.clone().zone(-90).minute(),30,"should get minute correctly");c.done()},from:function(f){var e=moment(),d=moment(e).zone(720),c=moment(e).zone(360),b=moment(e).zone(-690),a=moment(e).add(35,"m");f.equal(e.from(a),d.from(a),"moment#from should be the same in all zones");f.equal(e.from(a),c.from(a),"moment#from should be the same in all zones");f.equal(e.from(a),b.from(a),"moment#from should be the same in all zones");f.done()},diff:function(f){var e=moment(),d=moment(e).zone(720),c=moment(e).zone(360),b=moment(e).zone(-690),a=moment(e).add(35,"m");f.equal(e.diff(a),d.diff(a),"moment#diff should be the same in all zones");f.equal(e.diff(a),c.diff(a),"moment#diff should be the same in all zones");f.equal(e.diff(a),b.diff(a),"moment#diff should be the same in all zones");f.equal(e.diff(a,"minute",true),d.diff(a,"minute",true),"moment#diff should be the same in all zones");f.equal(e.diff(a,"minute",true),c.diff(a,"minute",true),"moment#diff should be the same in all zones");f.equal(e.diff(a,"minute",true),b.diff(a,"minute",true),"moment#diff should be the same in all zones");f.equal(e.diff(a,"hour",true),d.diff(a,"hour",true),"moment#diff should be the same in all zones");f.equal(e.diff(a,"hour",true),c.diff(a,"hour",true),"moment#diff should be the same in all zones");f.equal(e.diff(a,"hour",true),b.diff(a,"hour",true),"moment#diff should be the same in all zones");f.done()},"unix offset and timestamp":function(e){var d=moment(),c=moment(d).zone(720),b=moment(d).zone(360),a=moment(d).zone(-690);e.equal(d.unix(),c.unix(),"moment#unix should be the same in all zones");e.equal(d.unix(),b.unix(),"moment#unix should be the same in all zones");e.equal(d.unix(),a.unix(),"moment#unix should be the same in all zones");e.equal(+d,+c,"moment#valueOf should be the same in all zones");e.equal(+d,+b,"moment#valueOf should be the same in all zones");e.equal(+d,+a,"moment#valueOf should be the same in all zones");e.done()},cloning:function(a){a.equal(moment().zone(120).clone().zone(),120,"explicit cloning should retain the zone");a.equal(moment().zone(-120).clone().zone(),-120,"explicit cloning should retain the zone");a.equal(moment(moment().zone(120)).zone(),120,"implicit cloning should retain the zone");a.equal(moment(moment().zone(-120)).zone(),-120,"implicit cloning should retain the zone");a.done()},"start of / end of":function(c){var b=moment.utc([2010,1,2,0,0,0]).zone(450);c.equal(b.clone().startOf("day").hour(),0,"start of day should work on moments with a zone");c.equal(b.clone().startOf("day").minute(),0,"start of day should work on moments with a zone");c.equal(b.clone().startOf("hour").minute(),0,"start of hour should work on moments with a zone");c.equal(b.clone().endOf("day").hour(),23,"end of day should work on moments with a zone");c.equal(b.clone().endOf("day").minute(),59,"end of day should work on moments with a zone");c.equal(b.clone().endOf("hour").minute(),59,"end of hour should work on moments with a zone");c.done()},"reset zone with moment#utc":function(c){var b=moment.utc([2012]).zone(480);c.equal(b.clone().hour(),16,"different zone should have different hour");c.equal(b.clone().utc().hour(),0,"calling moment#utc should reset the offset");c.done()},"reset zone with moment#local":function(c){var b=moment([2012]).zone(480);c.equal(b.clone().local().hour(),0,"calling moment#local should reset the offset");c.done()},toDate:function(e){var d=new Date(),c=moment(d).zone(720).toDate(),b=moment(d).zone(360).toDate(),a=moment(d).zone(-690).toDate();e.equal(+d,+c,"moment#toDate should output a date with the right unix timestamp");e.equal(+d,+b,"moment#toDate should output a date with the right unix timestamp");e.equal(+d,+a,"moment#toDate should output a date with the right unix timestamp");e.done()},"same / before / after":function(d){var c=moment().utc(),b=moment(c).zone(120),a=moment(c).zone(-120);d.ok(c.isSame(b),"two moments with different offsets should be the same");d.ok(c.isSame(a),"two moments with different offsets should be the same");d.ok(c.isSame(b,"hour"),"two moments with different offsets should be the same hour");d.ok(c.isSame(a,"hour"),"two moments with different offsets should be the same hour");c.add(1,"hour");d.ok(c.isAfter(b),"isAfter should work with two moments with different offsets");d.ok(c.isAfter(a),"isAfter should work with two moments with different offsets");d.ok(c.isAfter(b,"hour"),"isAfter:hour should work with two moments with different offsets");d.ok(c.isAfter(a,"hour"),"isAfter:hour should work with two moments with different offsets");c.subtract(2,"hour");d.ok(c.isBefore(b),"isBefore should work with two moments with different offsets");d.ok(c.isBefore(a),"isBefore should work with two moments with different offsets");d.ok(c.isBefore(b,"hour"),"isBefore:hour should work with two moments with different offsets");d.ok(c.isBefore(a,"hour"),"isBefore:hour should work with two moments with different offsets");d.done()},"add / subtract over dst":function(c){var b=moment.updateOffset,a=moment.utc([2000,2,31,3]);moment.updateOffset=function(d,e){if(d.clone().utc().month()>2){d.zone(-60,e)}else{d.zone(0,e)}};c.equal(a.hour(),3,"should start at 00:00");a.add(24,"hour");c.equal(a.hour(),4,"adding 24 hours should disregard dst");a.subtract(24,"hour");c.equal(a.hour(),3,"subtracting 24 hours should disregard dst");a.add(1,"day");c.equal(a.hour(),3,"adding 1 day should have the same hour");a.subtract(1,"day");c.equal(a.hour(),3,"subtracting 1 day should have the same hour");a.add(1,"month");c.equal(a.hour(),3,"adding 1 month should have the same hour");a.subtract(1,"month");c.equal(a.hour(),3,"subtracting 1 month should have the same hour");moment.updateOffset=b;c.done()},isDST:function(b){var a=moment.updateOffset;moment.updateOffset=function(c,d){if(c.month()>2&&c.month()<9){c.zone(-60,d)}else{c.zone(0,d)}};b.ok(!moment().month(0).isDST(),"Jan should not be summer dst");b.ok(moment().month(6).isDST(),"Jul should be summer dst");b.ok(!moment().month(11).isDST(),"Dec should not be summer dst");moment.updateOffset=function(c){if(c.month()>2&&c.month()<9){c.zone(0)}else{c.zone(-60)}};b.ok(moment().month(0).isDST(),"Jan should be winter dst");b.ok(!moment().month(6).isDST(),"Jul should not be winter dst");b.ok(moment().month(11).isDST(),"Dec should be winter dst");moment.updateOffset=a;b.done()},"zone names":function(a){a.expect(8);a.equal(moment().zoneAbbr(),"","Local zone abbr should be empty");a.equal(moment().format("z"),"","Local zone formatted abbr should be empty");a.equal(moment().zoneName(),"","Local zone name should be empty");a.equal(moment().format("zz"),"","Local zone formatted name should be empty");a.equal(moment.utc().zoneAbbr(),"UTC","UTC zone abbr should be UTC");a.equal(moment.utc().format("z"),"UTC","UTC zone formatted abbr should be UTC");a.equal(moment.utc().zoneName(),"Coordinated Universal Time","UTC zone abbr should be Coordinated Universal Time");a.equal(moment.utc().format("zz"),"Coordinated Universal Time","UTC zone formatted abbr should be Coordinated Universal Time");a.done()},"hours alignment with UTC":function(a){a.expect(4);a.equals(moment().zone(120).hasAlignedHourOffset(),true);a.equals(moment().zone(-180).hasAlignedHourOffset(),true);a.equals(moment().zone(90).hasAlignedHourOffset(),false);a.equals(moment().zone(-90).hasAlignedHourOffset(),false);a.done()},"hours alignment with other zone":function(b){b.expect(16);var a=moment().zone(120);b.equals(a.hasAlignedHourOffset(moment().zone(180)),true);b.equals(a.hasAlignedHourOffset(moment().zone(-180)),true);b.equals(a.hasAlignedHourOffset(moment().zone(90)),false);b.equals(a.hasAlignedHourOffset(moment().zone(-90)),false);a=moment().zone(90);b.equals(a.hasAlignedHourOffset(moment().zone(180)),false);b.equals(a.hasAlignedHourOffset(moment().zone(-180)),false);b.equals(a.hasAlignedHourOffset(moment().zone(30)),true);b.equals(a.hasAlignedHourOffset(moment().zone(-30)),true);a=moment().zone(-60);b.equals(a.hasAlignedHourOffset(moment().zone(180)),true);b.equals(a.hasAlignedHourOffset(moment().zone(-180)),true);b.equals(a.hasAlignedHourOffset(moment().zone(90)),false);b.equals(a.hasAlignedHourOffset(moment().zone(-90)),false);a=moment().zone(25);b.equals(a.hasAlignedHourOffset(moment().zone(-35)),true);b.equals(a.hasAlignedHourOffset(moment().zone(85)),true);b.equals(a.hasAlignedHourOffset(moment().zone(35)),false);b.equals(a.hasAlignedHourOffset(moment().zone(-85)),false);b.done()},"parse zone":function(b){b.expect(2);var a=moment("2013-01-01T00:00:00-13:00").parseZone();b.equal(a.zone(),13*60);b.equal(a.hours(),0);b.done()},"parse zone static":function(b){b.expect(2);var a=moment.parseZone("2013-01-01T00:00:00-13:00");b.equal(a.zone(),13*60);b.equal(a.hours(),0);b.done()},"parse zone with more arguments":function(b){var a;b.expect(3);a=moment.parseZone("2013 01 01 05 -13:00","YYYY MM DD HH ZZ");b.equal(a.format(),"2013-01-01T05:00:00-13:00","accept input and format");a=moment.parseZone("2013-01-01-13:00","YYYY MM DD ZZ",true);b.equal(a.isValid(),false,"accept input, format and strict flag");a=moment.parseZone("2013-01-01-13:00",["DD MM YYYY ZZ","YYYY MM DD ZZ"]);b.equal(a.format(),"2013-01-01T00:00:00-13:00","accept input and array of formats");b.done()},"parse zone with a timezone from the format string":function(b){b.expect(1);var a=moment("11-12-2013 -0400 +1100","DD-MM-YYYY ZZ #####").parseZone();b.equal(a.zone(),4*60);b.done()},"parse zone without a timezone included in the format string":function(b){b.expect(1);var a=moment("11-12-2013 -0400 +1100","DD-MM-YYYY").parseZone();b.equal(a.zone(),-11*60);b.done()},"timezone format":function(a){a.equal(moment().zone(-60).format("ZZ"),"+0100","-60 -> +0100");a.equal(moment().zone(-90).format("ZZ"),"+0130","-90 -> +0130");a.equal(moment().zone(-120).format("ZZ"),"+0200","-120 -> +0200");a.equal(moment().zone(+60).format("ZZ"),"-0100","+60 -> -0100");a.equal(moment().zone(+90).format("ZZ"),"-0130","+90 -> -0130");a.equal(moment().zone(+120).format("ZZ"),"-0200","+120 -> -0200");a.done()}};