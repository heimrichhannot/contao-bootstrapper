var moment=require("../../moment"),getVerifier=function(a){return function(c,g,f,e,d){var b=moment(c,g);a.equal(b.format("YYYY MM DD"),f,"compare: "+e);if(!d){a.equal(b.format(g),c,"round trip: "+e)}}};exports.create={setUp:function(a){moment.locale("en");moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};a()},array:function(a){a.expect(8);a.ok(moment([2010]).toDate() instanceof Date,"[2010]");a.ok(moment([2010,1]).toDate() instanceof Date,"[2010, 1]");a.ok(moment([2010,1,12]).toDate() instanceof Date,"[2010, 1, 12]");a.ok(moment([2010,1,12,1]).toDate() instanceof Date,"[2010, 1, 12, 1]");a.ok(moment([2010,1,12,1,1]).toDate() instanceof Date,"[2010, 1, 12, 1, 1]");a.ok(moment([2010,1,12,1,1,1]).toDate() instanceof Date,"[2010, 1, 12, 1, 1, 1]");a.ok(moment([2010,1,12,1,1,1,1]).toDate() instanceof Date,"[2010, 1, 12, 1, 1, 1, 1]");a.equal(+moment(new Date(2010,1,14,15,25,50,125)),+moment([2010,1,14,15,25,50,125]),"constructing with array === constructing with new Date()");a.done()},"array copying":function(b){var a=[2009,11];b.expect(1);moment(a);b.deepEqual(a,[2009,11],"initializer should not mutate the original array");b.done()},object:function(a){a.expect(10);a.ok(moment({year:2010}).toDate() instanceof Date,"{year: 2010}");a.ok(moment({year:2010,month:1}).toDate() instanceof Date,"{year: 2010, month: 1}");a.ok(moment({year:2010,month:1,day:12}).toDate() instanceof Date,"{year: 2010, month: 1, day: 12}");a.ok(moment({year:2010,month:1,day:12,hours:1}).toDate() instanceof Date,"{year: 2010, month: 1, day: 12, hours: 1}");a.ok(moment({year:2010,month:1,day:12,hours:1,minutes:1}).toDate() instanceof Date,"{year: 2010, month: 1, hours: 12, minutes: 1, seconds: 1}");a.ok(moment({year:2010,month:1,day:12,hours:1,minutes:1,seconds:1}).toDate() instanceof Date,"{year: 2010, month: 1, day: 12, hours: 1, minutes: 1, seconds: 1}");a.ok(moment({year:2010,month:1,day:12,hours:1,minutes:1,seconds:1,milliseconds:1}).toDate() instanceof Date,"{year: 2010, month: 1, day: 12, hours: 1, minutes: 1, seconds: 1, milliseconds: 1}");a.equal(+moment(new Date(2010,1,14,15,25,50,125)),+moment({years:2010,months:1,days:14,hours:15,minutes:25,seconds:50,milliseconds:125}),"constructing with object (long plural) === constructing with new Date()");a.equal(+moment(new Date(2010,1,14,15,25,50,125)),+moment({year:2010,month:1,day:14,hour:15,minute:25,second:50,millisecond:125}),"constructing with object (long) === constructing with new Date()");a.equal(+moment(new Date(2010,1,14,15,25,50,125)),+moment({y:2010,M:1,d:14,h:15,m:25,s:50,ms:125}),"constructing with object (short) === constructing with new Date()");a.done()},"multi format array copying":function(b){var a=["MM/DD/YYYY","YYYY-MM-DD","MM-DD-YYYY"];b.expect(1);moment("1999-02-13",a);b.deepEqual(a,["MM/DD/YYYY","YYYY-MM-DD","MM-DD-YYYY"],"initializer should not mutate the original array");b.done()},number:function(a){a.expect(3);a.ok(moment(1000).toDate() instanceof Date,"1000");a.ok((moment(1000).valueOf()===1000),"testing valueOf");a.ok((moment.utc(1000).valueOf()===1000),"testing valueOf");a.done()},unix:function(a){a.expect(8);a.equal(moment.unix(1).valueOf(),1000,"1 unix timestamp == 1000 Date.valueOf");a.equal(moment(1000).unix(),1,"1000 Date.valueOf == 1 unix timestamp");a.equal(moment.unix(1000).valueOf(),1000000,"1000 unix timestamp == 1000000 Date.valueOf");a.equal(moment(1500).unix(),1,"1500 Date.valueOf == 1 unix timestamp");a.equal(moment(1900).unix(),1,"1900 Date.valueOf == 1 unix timestamp");a.equal(moment(2100).unix(),2,"2100 Date.valueOf == 2 unix timestamp");a.equal(moment(1333129333524).unix(),1333129333,"1333129333524 Date.valueOf == 1333129333 unix timestamp");a.equal(moment(1333129333524000).unix(),1333129333524,"1333129333524000 Date.valueOf == 1333129333524 unix timestamp");a.done()},date:function(a){a.expect(1);a.ok(moment(new Date()).toDate() instanceof Date,"new Date()");a.done()},"date mutation":function(c){c.expect(1);var b=new Date();c.ok(moment(b).toDate()!==b,"the date moment uses should not be the date passed in");c.done()},moment:function(a){a.expect(2);a.ok(moment(moment()).toDate() instanceof Date,"moment(moment())");a.ok(moment(moment(moment())).toDate() instanceof Date,"moment(moment(moment()))");a.done()},"cloning moment should only copy own properties":function(a){a.ok(!moment().clone().hasOwnProperty("month"),"Should not clone prototype methods");a.done()},"cloning moment works with weird clones":function(d){var c=function(f,e){var g;for(g in e){f[g]=e[g]}return f},a=moment(),b=moment.utc();d.expect(2);d.equal(+c({},a).clone(),+a,"cloning extend-ed now is now");d.equal(+c({},b).clone(),+b,"cloning extend-ed utc now is utc now");d.done()},"cloning respects moment.momentProperties":function(b){var a=moment();b.equal(a.clone()._special,undefined,"cloning ignores extra properties");a._special="bacon";moment.momentProperties.push("_special");b.equal(a.clone()._special,"bacon","cloning respects momentProperties");moment.momentProperties.pop();b.done()},"undefined":function(a){a.expect(1);a.ok(moment().toDate() instanceof Date,"undefined");a.done()},"string without format - json":function(a){a.expect(5);a.equal(moment("Date(1325132654000)").valueOf(),1325132654000,"Date(1325132654000)");a.equal(moment("Date(-1325132654000)").valueOf(),-1325132654000,"Date(-1325132654000)");a.equal(moment("/Date(1325132654000)/").valueOf(),1325132654000,"/Date(1325132654000)/");a.equal(moment("/Date(1325132654000+0700)/").valueOf(),1325132654000,"/Date(1325132654000+0700)/");a.equal(moment("/Date(1325132654000-0700)/").valueOf(),1325132654000,"/Date(1325132654000-0700)/");a.done()},"string with format dropped am/pm bug":function(a){moment.locale("en");a.equal(moment("05/1/2012 12:25:00","MM/DD/YYYY h:m:s a").format("MM/DD/YYYY"),"05/01/2012","should not break if am/pm is left off from the parsing tokens");a.equal(moment("05/1/2012 12:25:00 am","MM/DD/YYYY h:m:s a").format("MM/DD/YYYY"),"05/01/2012","should not break if am/pm is left off from the parsing tokens");a.equal(moment("05/1/2012 12:25:00 pm","MM/DD/YYYY h:m:s a").format("MM/DD/YYYY"),"05/01/2012","should not break if am/pm is left off from the parsing tokens");a.ok(moment("05/1/2012 12:25:00","MM/DD/YYYY h:m:s a").isValid());a.ok(moment("05/1/2012 12:25:00 am","MM/DD/YYYY h:m:s a").isValid());a.ok(moment("05/1/2012 12:25:00 pm","MM/DD/YYYY h:m:s a").isValid());a.done()},"empty string with formats":function(a){a.expect(8);a.equal(moment("","MM").format("YYYY-MM-DD HH:mm:ss"),"Invalid date");a.equal(moment(" ","MM").format("YYYY-MM-DD HH:mm:ss"),"Invalid date");a.equal(moment(" ","DD").format("YYYY-MM-DD HH:mm:ss"),"Invalid date");a.equal(moment(" ",["MM","DD"]).format("YYYY-MM-DD HH:mm:ss"),"Invalid date");a.ok(!moment("","MM").isValid());a.ok(!moment(" ","MM").isValid());a.ok(!moment(" ","DD").isValid());a.ok(!moment(" ",["MM","DD"]).isValid());a.done()},"defaulting to current date":function(b){b.expect(4);var a=moment();b.equal(moment("12:13:14","hh:mm:ss").format("YYYY-MM-DD hh:mm:ss"),a.clone().hour(12).minute(13).second(14).format("YYYY-MM-DD hh:mm:ss"),"given only time default to current date");b.equal(moment("05","DD").format("YYYY-MM-DD"),a.clone().date(5).format("YYYY-MM-DD"),"given day of month default to current month, year");b.equal(moment("05","MM").format("YYYY-MM-DD"),a.clone().month(4).date(1).format("YYYY-MM-DD"),"given month default to current year");b.equal(moment("1996","YYYY").format("YYYY-MM-DD"),a.clone().year(1996).month(0).date(1).format("YYYY-MM-DD"),"given year do not default");b.done()},"matching am/pm":function(a){a.expect(13);a.equal(moment("2012-09-03T03:00PM","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00PM","am/pm should parse correctly for PM");a.equal(moment("2012-09-03T03:00P.M.","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00PM","am/pm should parse correctly for P.M.");a.equal(moment("2012-09-03T03:00P","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00PM","am/pm should parse correctly for P");a.equal(moment("2012-09-03T03:00pm","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00PM","am/pm should parse correctly for pm");a.equal(moment("2012-09-03T03:00p.m.","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00PM","am/pm should parse correctly for p.m.");a.equal(moment("2012-09-03T03:00p","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00PM","am/pm should parse correctly for p");a.equal(moment("2012-09-03T03:00AM","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00AM","am/pm should parse correctly for AM");a.equal(moment("2012-09-03T03:00A.M.","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00AM","am/pm should parse correctly for A.M.");a.equal(moment("2012-09-03T03:00A","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00AM","am/pm should parse correctly for A");a.equal(moment("2012-09-03T03:00am","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00AM","am/pm should parse correctly for am");a.equal(moment("2012-09-03T03:00a.m.","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00AM","am/pm should parse correctly for a.m.");a.equal(moment("2012-09-03T03:00a","YYYY-MM-DDThh:mmA").format("YYYY-MM-DDThh:mmA"),"2012-09-03T03:00AM","am/pm should parse correctly for a");a.equal(moment("5:00p.m.March 4 2012","h:mmAMMMM D YYYY").format("YYYY-MM-DDThh:mmA"),"2012-03-04T05:00PM","am/pm should parse correctly before month names");a.done()},"string with format":function(e){moment.locale("en");var c=[["YYYY-Q","2014-4"],["MM-DD-YYYY","12-02-1999"],["DD-MM-YYYY","12-02-1999"],["DD/MM/YYYY","12/02/1999"],["DD_MM_YYYY","12_02_1999"],["DD:MM:YYYY","12:02:1999"],["D-M-YY","2-2-99"],["YY","99"],["DDD-YYYY","300-1999"],["DD-MM-YYYY h:m:s","12-02-1999 2:45:10"],["DD-MM-YYYY h:m:s a","12-02-1999 2:45:10 am"],["DD-MM-YYYY h:m:s a","12-02-1999 2:45:10 pm"],["h:mm a","12:00 pm"],["h:mm a","12:30 pm"],["h:mm a","12:00 am"],["h:mm a","12:30 am"],["HH:mm","12:00"],["YYYY-MM-DDTHH:mm:ss","2011-11-11T11:11:11"],["MM-DD-YYYY [M]","12-02-1999 M"],["ddd MMM DD HH:mm:ss YYYY","Tue Apr 07 22:52:51 2009"],["HH:mm:ss","12:00:00"],["HH:mm:ss","12:30:00"],["HH:mm:ss","00:00:00"],["HH:mm:ss S","00:30:00 1"],["HH:mm:ss SS","00:30:00 12"],["HH:mm:ss SSS","00:30:00 123"],["HH:mm:ss S","00:30:00 7"],["HH:mm:ss SS","00:30:00 78"],["HH:mm:ss SSS","00:30:00 789"],["X","1234567890"],["LT","12:30 AM"],["L","09/02/1999"],["l","9/2/1999"],["LL","September 2, 1999"],["ll","Sep 2, 1999"],["LLL","September 2, 1999 12:30 AM"],["lll","Sep 2, 1999 12:30 AM"],["LLLL","Thursday, September 2, 1999 12:30 AM"],["llll","Thu, Sep 2, 1999 12:30 AM"]],b,d;e.expect(2*c.length);for(d=0;d<c.length;d++){b=moment(c[d][1],c[d][0]);e.ok(b.isValid());e.equal(b.format(c[d][0]),c[d][1],c[d][0]+" ---> "+c[d][1])}e.done()},"unix timestamp format":function(d){var a=["X","X.S","X.SS","X.SSS"],b,c;d.expect(a.length*4);for(b=0;b<a.length;b++){c=a[b];d.equal(moment("1234567890",c).valueOf(),1234567890*1000,c+" matches timestamp without milliseconds");d.equal(moment("1234567890.1",c).valueOf(),1234567890*1000+100,c+" matches timestamp with deciseconds");d.equal(moment("1234567890.12",c).valueOf(),1234567890*1000+120,c+" matches timestamp with centiseconds");d.equal(moment("1234567890.123",c).valueOf(),1234567890*1000+123,c+" matches timestamp with milliseconds")}d.done()},"milliseconds format":function(a){a.expect(5);a.equal(moment("1","S").get("ms"),100,"deciseconds");a.equal(moment("12","SS").get("ms"),120,"centiseconds");a.equal(moment("123","SSS").get("ms"),123,"milliseconds");a.equal(moment("1234","SSSS").get("ms"),123,"milliseconds with SSSS");a.equal(moment("123456789101112","SSSS").get("ms"),123,"milliseconds with SSSS");a.done()},"string with format no separators":function(d){moment.locale("en");var b=[["MMDDYYYY","12021999"],["DDMMYYYY","12021999"],["YYYYMMDD","19991202"],["DDMMMYYYY","10Sep2001"]],c;d.expect(b.length);for(c=0;c<b.length;c++){d.equal(moment(b[c][1],b[c][0]).format(b[c][0]),b[c][1],b[c][0]+" ---> "+b[c][1])}d.done()},"string with format (timezone)":function(a){a.expect(8);a.equal(moment("5 -0700","H ZZ").toDate().getUTCHours(),12,"parse hours '5 -0700' ---> 'H ZZ'");a.equal(moment("5 -07:00","H Z").toDate().getUTCHours(),12,"parse hours '5 -07:00' ---> 'H Z'");a.equal(moment("5 -0730","H ZZ").toDate().getUTCMinutes(),30,"parse hours '5 -0730' ---> 'H ZZ'");a.equal(moment("5 -07:30","H Z").toDate().getUTCMinutes(),30,"parse hours '5 -07:0' ---> 'H Z'");a.equal(moment("5 +0100","H ZZ").toDate().getUTCHours(),4,"parse hours '5 +0100' ---> 'H ZZ'");a.equal(moment("5 +01:00","H Z").toDate().getUTCHours(),4,"parse hours '5 +01:00' ---> 'H Z'");a.equal(moment("5 +0130","H ZZ").toDate().getUTCMinutes(),30,"parse hours '5 +0130' ---> 'H ZZ'");a.equal(moment("5 +01:30","H Z").toDate().getUTCMinutes(),30,"parse hours '5 +01:30' ---> 'H Z'");a.done()},"string with format (timezone offset)":function(m){var h,g,l,k,j,i;m.expect(4);h=new Date(Date.UTC(2011,0,1,1));g=moment("2011 1 1 0 -01:00","YYYY MM DD HH Z");m.equal(h.getHours(),g.hours(),"date created with utc == parsed string with timezone offset");m.equal(+h,+g,"date created with utc == parsed string with timezone offset");l=moment("2011 2 1 10 -05:00","YYYY MM DD HH Z");k=moment("2011 2 1 8 -07:00","YYYY MM DD HH Z");m.equal(l.hours(),k.hours(),"10 am central time == 8 am pacific time");j=moment.utc("Fri, 20 Jul 2012 17:15:00","ddd, DD MMM YYYY HH:mm:ss");i=moment.utc("Fri, 20 Jul 2012 10:15:00 -0700","ddd, DD MMM YYYY HH:mm:ss ZZ");m.equal(j.hours(),i.hours(),"parse timezone offset in utc");m.done()},"string with timezone around start of year":function(a){a.equal(moment("2000-01-01T00:00:00.000+01:00").toISOString(),"1999-12-31T23:00:00.000Z","+1:00 around 2000");a.equal(moment("2000-01-01T00:00:00.000-01:00").toISOString(),"2000-01-01T01:00:00.000Z","-1:00 around 2000");a.equal(moment("1970-01-01T00:00:00.000+01:00").toISOString(),"1969-12-31T23:00:00.000Z","+1:00 around 1970");a.equal(moment("1970-01-01T00:00:00.000-01:00").toISOString(),"1970-01-01T01:00:00.000Z","-1:00 around 1970");a.equal(moment("1200-01-01T00:00:00.000+01:00").toISOString(),"1199-12-31T23:00:00.000Z","+1:00 around 1200");a.equal(moment("1200-01-01T00:00:00.000-01:00").toISOString(),"1200-01-01T01:00:00.000Z","-1:00 around 1200");a.done()},"string with array of formats":function(a){a.equal(moment("11-02-1999",["MM-DD-YYYY","DD-MM-YYYY"]).format("MM DD YYYY"),"11 02 1999","switching month and day");a.equal(moment("02-11-1999",["MM/DD/YYYY","YYYY MM DD","MM-DD-YYYY"]).format("MM DD YYYY"),"02 11 1999","year last");a.equal(moment("1999-02-11",["MM/DD/YYYY","YYYY MM DD","MM-DD-YYYY"]).format("MM DD YYYY"),"02 11 1999","year first");a.equal(moment("02-11-1999",["MM/DD/YYYY","YYYY MM DD"]).format("MM DD YYYY"),"02 11 1999","year last");a.equal(moment("1999-02-11",["MM/DD/YYYY","YYYY MM DD"]).format("MM DD YYYY"),"02 11 1999","year first");a.equal(moment("02-11-1999",["YYYY MM DD","MM/DD/YYYY"]).format("MM DD YYYY"),"02 11 1999","year last");a.equal(moment("1999-02-11",["YYYY MM DD","MM/DD/YYYY"]).format("MM DD YYYY"),"02 11 1999","year first");a.equal(moment("13-11-1999",["MM/DD/YYYY","DD/MM/YYYY"]).format("MM DD YYYY"),"11 13 1999","second must be month");a.equal(moment("11-13-1999",["MM/DD/YYYY","DD/MM/YYYY"]).format("MM DD YYYY"),"11 13 1999","first must be month");a.equal(moment("01-02-2000",["MM/DD/YYYY","DD/MM/YYYY"]).format("MM DD YYYY"),"01 02 2000","either can be a month, month first format");a.equal(moment("02-01-2000",["DD/MM/YYYY","MM/DD/YYYY"]).format("MM DD YYYY"),"01 02 2000","either can be a month, day first format");a.equal(moment("11-02-10",["MM/DD/YY","YY MM DD","DD-MM-YY"]).format("MM DD YYYY"),"02 11 2010","all unparsed substrings have influence on format penalty");a.equal(moment("11-02-10",["MM-DD-YY HH:mm","YY MM DD"]).format("MM DD YYYY"),"02 10 2011","prefer formats without extra tokens");a.equal(moment("11-02-10 junk",["MM-DD-YY","YY.MM.DD junk"]).format("MM DD YYYY"),"02 10 2011","prefer formats that dont result in extra characters");a.equal(moment("11-22-10",["YY-MM-DD","YY-DD-MM"]).format("MM DD YYYY"),"10 22 2011","prefer valid results");a.equal(moment("gibberish",["YY-MM-DD","YY-DD-MM"]).format("MM DD YYYY"),"Invalid date","doest throw for invalid strings");a.equal(moment("gibberish",[]).format("MM DD YYYY"),"Invalid date","doest throw for an empty array");a.equal(moment("System Administrator and Database Assistant (7/1/2011), System Administrator and Database Assistant (7/1/2011), Database Coordinator (7/1/2011), Vice President (7/1/2011), System Administrator and Database Assistant (5/31/2012), Database Coordinator (7/1/2012), System Administrator and Database Assistant (7/1/2013)",["MM/DD/YYYY","MM-DD-YYYY","YYYY-MM-DD","YYYY-MM-DDTHH:mm:ssZ"]).format("YYYY-MM-DD"),"2011-07-01","Works for long strings");a.equal(moment("11-02-10",["MM.DD.YY","DD-MM-YY"]).format("MM DD YYYY"),"02 11 2010","escape RegExp special characters on comparing");a.equal(moment("13-10-98",["DD MM YY","DD MM YYYY"])._f,"DD MM YY","use two digit year");a.equal(moment("13-10-1998",["DD MM YY","DD MM YYYY"])._f,"DD MM YYYY","use four digit year");a.equal(moment("01",["MM","DD"])._f,"MM","Should use first valid format");a.done()},"string with array of formats + ISO":function(a){a.equal(moment("1994",[moment.ISO_8601,"MM","HH:mm","YYYY"]).year(),1994,"iso: test parse YYYY");a.equal(moment("17:15",[moment.ISO_8601,"MM","HH:mm","YYYY"]).hour(),17,"iso: test parse HH:mm (1)");a.equal(moment("17:15",[moment.ISO_8601,"MM","HH:mm","YYYY"]).minutes(),15,"iso: test parse HH:mm (2)");a.equal(moment("06",[moment.ISO_8601,"MM","HH:mm","YYYY"]).month(),6-1,"iso: test parse MM");a.equal(moment("2012-06-01",[moment.ISO_8601,"MM","HH:mm","YYYY"]).parsingFlags().iso,true,"iso: test parse iso");a.equal(moment("2014-05-05",[moment.ISO_8601,"YYYY-MM-DD"]).parsingFlags().iso,true,"iso: edge case array precedence iso");a.equal(moment("2014-05-05",["YYYY-MM-DD",moment.ISO_8601]).parsingFlags().iso,false,"iso: edge case array precedence not iso");a.done()},"string with format - years":function(a){a.expect(4);a.equal(moment("67","YY").format("YYYY"),"2067","67 > 2067");a.equal(moment("68","YY").format("YYYY"),"2068","68 > 2068");a.equal(moment("69","YY").format("YYYY"),"1969","69 > 1969");a.equal(moment("70","YY").format("YYYY"),"1970","70 > 1970");a.done()},"implicit cloning":function(c){c.expect(2);var b=moment([2011,10,10]),a=moment(b);b.month(5);c.equal(a.month(),10,"Calling moment() on a moment will create a clone");c.equal(b.month(),5,"Calling moment() on a moment will create a clone");c.done()},"explicit cloning":function(c){c.expect(2);var b=moment([2011,10,10]),a=b.clone();b.month(5);c.equal(a.month(),10,"Calling moment() on a moment will create a clone");c.equal(b.month(),5,"Calling moment() on a moment will create a clone");c.done()},"cloning carrying over utc mode":function(a){a.expect(8);a.equal(moment().local().clone()._isUTC,false,"An explicit cloned local moment should have _isUTC == false");a.equal(moment().utc().clone()._isUTC,true,"An cloned utc moment should have _isUTC == true");a.equal(moment().clone()._isUTC,false,"An explicit cloned local moment should have _isUTC == false");a.equal(moment.utc().clone()._isUTC,true,"An explicit cloned utc moment should have _isUTC == true");a.equal(moment(moment().local())._isUTC,false,"An implicit cloned local moment should have _isUTC == false");a.equal(moment(moment().utc())._isUTC,true,"An implicit cloned utc moment should have _isUTC == true");a.equal(moment(moment())._isUTC,false,"An implicit cloned local moment should have _isUTC == false");a.equal(moment(moment.utc())._isUTC,true,"An implicit cloned utc moment should have _isUTC == true");a.done()},"parsing iso":function(h){var d=moment([2011,9,8]).zone(),b=function(i){if(i<10){return"0"+i}return""+i},a=(d>0)?Math.floor(d/60):Math.ceil(d/60),j=d-(a*60),c=(d>0)?"-"+b(a)+":"+b(j):"+"+b(-a)+":"+b(-j),g=c.replace(":",""),f=g.slice(0,3),k=[["2011-10-08","2011-10-08T00:00:00.000"+c],["2011-10-08T18","2011-10-08T18:00:00.000"+c],["2011-10-08T18:04","2011-10-08T18:04:00.000"+c],["2011-10-08T18:04:20","2011-10-08T18:04:20.000"+c],["2011-10-08T18:04"+c,"2011-10-08T18:04:00.000"+c],["2011-10-08T18:04:20"+c,"2011-10-08T18:04:20.000"+c],["2011-10-08T18:04"+g,"2011-10-08T18:04:00.000"+c],["2011-10-08T18:04:20"+g,"2011-10-08T18:04:20.000"+c],["2011-10-08T18:04"+f,"2011-10-08T18:04:00.000"+c],["2011-10-08T18:04:20"+f,"2011-10-08T18:04:20.000"+c],["2011-10-08T18:04:20.1"+g,"2011-10-08T18:04:20.100"+c],["2011-10-08T18:04:20.11"+g,"2011-10-08T18:04:20.110"+c],["2011-10-08T18:04:20.111"+g,"2011-10-08T18:04:20.111"+c],["2011-10-08 18","2011-10-08T18:00:00.000"+c],["2011-10-08 18:04","2011-10-08T18:04:00.000"+c],["2011-10-08 18:04:20","2011-10-08T18:04:20.000"+c],["2011-10-08 18:04"+c,"2011-10-08T18:04:00.000"+c],["2011-10-08 18:04:20"+c,"2011-10-08T18:04:20.000"+c],["2011-10-08 18:04"+g,"2011-10-08T18:04:00.000"+c],["2011-10-08 18:04:20"+g,"2011-10-08T18:04:20.000"+c],["2011-10-08 18:04"+f,"2011-10-08T18:04:00.000"+c],["2011-10-08 18:04:20"+f,"2011-10-08T18:04:20.000"+c],["2011-10-08 18:04:20.1"+g,"2011-10-08T18:04:20.100"+c],["2011-10-08 18:04:20.11"+g,"2011-10-08T18:04:20.110"+c],["2011-10-08 18:04:20.111"+g,"2011-10-08T18:04:20.111"+c],["2011-W40","2011-10-03T00:00:00.000"+c],["2011-W40-6","2011-10-08T00:00:00.000"+c],["2011-W40-6T18","2011-10-08T18:00:00.000"+c],["2011-W40-6T18:04","2011-10-08T18:04:00.000"+c],["2011-W40-6T18:04:20","2011-10-08T18:04:20.000"+c],["2011-W40-6T18:04"+c,"2011-10-08T18:04:00.000"+c],["2011-W40-6T18:04:20"+c,"2011-10-08T18:04:20.000"+c],["2011-W40-6T18:04"+g,"2011-10-08T18:04:00.000"+c],["2011-W40-6T18:04:20"+g,"2011-10-08T18:04:20.000"+c],["2011-W40-6T18:04"+f,"2011-10-08T18:04:00.000"+c],["2011-W40-6T18:04:20"+f,"2011-10-08T18:04:20.000"+c],["2011-W40-6T18:04:20.1"+g,"2011-10-08T18:04:20.100"+c],["2011-W40-6T18:04:20.11"+g,"2011-10-08T18:04:20.110"+c],["2011-W40-6T18:04:20.111"+g,"2011-10-08T18:04:20.111"+c],["2011-W40-6 18","2011-10-08T18:00:00.000"+c],["2011-W40-6 18:04","2011-10-08T18:04:00.000"+c],["2011-W40-6 18:04:20","2011-10-08T18:04:20.000"+c],["2011-W40-6 18:04"+c,"2011-10-08T18:04:00.000"+c],["2011-W40-6 18:04:20"+c,"2011-10-08T18:04:20.000"+c],["2011-W40-6 18:04"+g,"2011-10-08T18:04:00.000"+c],["2011-W40-6 18:04:20"+g,"2011-10-08T18:04:20.000"+c],["2011-W40-6 18:04"+f,"2011-10-08T18:04:00.000"+c],["2011-W40-6 18:04:20"+f,"2011-10-08T18:04:20.000"+c],["2011-W40-6 18:04:20.1"+g,"2011-10-08T18:04:20.100"+c],["2011-W40-6 18:04:20.11"+g,"2011-10-08T18:04:20.110"+c],["2011-W40-6 18:04:20.111"+g,"2011-10-08T18:04:20.111"+c],["2011-281","2011-10-08T00:00:00.000"+c],["2011-281T18","2011-10-08T18:00:00.000"+c],["2011-281T18:04","2011-10-08T18:04:00.000"+c],["2011-281T18:04:20","2011-10-08T18:04:20.000"+c],["2011-281T18:04"+c,"2011-10-08T18:04:00.000"+c],["2011-281T18:04:20"+c,"2011-10-08T18:04:20.000"+c],["2011-281T18:04"+g,"2011-10-08T18:04:00.000"+c],["2011-281T18:04:20"+g,"2011-10-08T18:04:20.000"+c],["2011-281T18:04"+f,"2011-10-08T18:04:00.000"+c],["2011-281T18:04:20"+f,"2011-10-08T18:04:20.000"+c],["2011-281T18:04:20.1"+g,"2011-10-08T18:04:20.100"+c],["2011-281T18:04:20.11"+g,"2011-10-08T18:04:20.110"+c],["2011-281T18:04:20.111"+g,"2011-10-08T18:04:20.111"+c],["2011-281 18","2011-10-08T18:00:00.000"+c],["2011-281 18:04","2011-10-08T18:04:00.000"+c],["2011-281 18:04:20","2011-10-08T18:04:20.000"+c],["2011-281 18:04"+c,"2011-10-08T18:04:00.000"+c],["2011-281 18:04:20"+c,"2011-10-08T18:04:20.000"+c],["2011-281 18:04"+g,"2011-10-08T18:04:00.000"+c],["2011-281 18:04:20"+g,"2011-10-08T18:04:20.000"+c],["2011-281 18:04"+f,"2011-10-08T18:04:00.000"+c],["2011-281 18:04:20"+f,"2011-10-08T18:04:20.000"+c],["2011-281 18:04:20.1"+g,"2011-10-08T18:04:20.100"+c],["2011-281 18:04:20.11"+g,"2011-10-08T18:04:20.110"+c],["2011-281 18:04:20.111"+g,"2011-10-08T18:04:20.111"+c]],e;h.expect(k.length);for(e=0;e<k.length;e++){h.equal(moment(k[e][0]).format("YYYY-MM-DDTHH:mm:ss.SSSZ"),k[e][1],"moment should be able to parse ISO "+k[e][0])}h.done()},"parsing iso week year/week/weekday":function(a){a.equal(moment.utc("2007-W01").format(),"2007-01-01T00:00:00+00:00","2008 week 1 (1st Jan Mon)");a.equal(moment.utc("2008-W01").format(),"2007-12-31T00:00:00+00:00","2008 week 1 (1st Jan Tue)");a.equal(moment.utc("2003-W01").format(),"2002-12-30T00:00:00+00:00","2008 week 1 (1st Jan Wed)");a.equal(moment.utc("2009-W01").format(),"2008-12-29T00:00:00+00:00","2009 week 1 (1st Jan Thu)");a.equal(moment.utc("2010-W01").format(),"2010-01-04T00:00:00+00:00","2010 week 1 (1st Jan Fri)");a.equal(moment.utc("2011-W01").format(),"2011-01-03T00:00:00+00:00","2011 week 1 (1st Jan Sat)");a.equal(moment.utc("2012-W01").format(),"2012-01-02T00:00:00+00:00","2012 week 1 (1st Jan Sun)");a.done()},"parsing week year/week/weekday (dow 1, doy 4)":function(a){moment.locale("dow:1,doy:4",{week:{dow:1,doy:4}});a.equal(moment.utc("2007-01","gggg-ww").format(),"2007-01-01T00:00:00+00:00","2007 week 1 (1st Jan Mon)");a.equal(moment.utc("2008-01","gggg-ww").format(),"2007-12-31T00:00:00+00:00","2008 week 1 (1st Jan Tue)");a.equal(moment.utc("2003-01","gggg-ww").format(),"2002-12-30T00:00:00+00:00","2003 week 1 (1st Jan Wed)");a.equal(moment.utc("2009-01","gggg-ww").format(),"2008-12-29T00:00:00+00:00","2009 week 1 (1st Jan Thu)");a.equal(moment.utc("2010-01","gggg-ww").format(),"2010-01-04T00:00:00+00:00","2010 week 1 (1st Jan Fri)");a.equal(moment.utc("2011-01","gggg-ww").format(),"2011-01-03T00:00:00+00:00","2011 week 1 (1st Jan Sat)");a.equal(moment.utc("2012-01","gggg-ww").format(),"2012-01-02T00:00:00+00:00","2012 week 1 (1st Jan Sun)");moment.defineLocale("dow:1,doy:4",null);a.done()},"parsing week year/week/weekday (dow 1, doy 7)":function(a){moment.locale("dow:1,doy:7",{week:{dow:1,doy:7}});a.equal(moment.utc("2007-01","gggg-ww").format(),"2007-01-01T00:00:00+00:00","2007 week 1 (1st Jan Mon)");a.equal(moment.utc("2008-01","gggg-ww").format(),"2007-12-31T00:00:00+00:00","2008 week 1 (1st Jan Tue)");a.equal(moment.utc("2003-01","gggg-ww").format(),"2002-12-30T00:00:00+00:00","2003 week 1 (1st Jan Wed)");a.equal(moment.utc("2009-01","gggg-ww").format(),"2008-12-29T00:00:00+00:00","2009 week 1 (1st Jan Thu)");a.equal(moment.utc("2010-01","gggg-ww").format(),"2009-12-28T00:00:00+00:00","2010 week 1 (1st Jan Fri)");a.equal(moment.utc("2011-01","gggg-ww").format(),"2010-12-27T00:00:00+00:00","2011 week 1 (1st Jan Sat)");a.equal(moment.utc("2012-01","gggg-ww").format(),"2011-12-26T00:00:00+00:00","2012 week 1 (1st Jan Sun)");moment.defineLocale("dow:1,doy:7",null);a.done()},"parsing week year/week/weekday (dow 0, doy 6)":function(a){moment.locale("dow:0,doy:6",{week:{dow:0,doy:6}});a.equal(moment.utc("2007-01","gggg-ww").format(),"2006-12-31T00:00:00+00:00","2007 week 1 (1st Jan Mon)");a.equal(moment.utc("2008-01","gggg-ww").format(),"2007-12-30T00:00:00+00:00","2008 week 1 (1st Jan Tue)");a.equal(moment.utc("2003-01","gggg-ww").format(),"2002-12-29T00:00:00+00:00","2003 week 1 (1st Jan Wed)");a.equal(moment.utc("2009-01","gggg-ww").format(),"2008-12-28T00:00:00+00:00","2009 week 1 (1st Jan Thu)");a.equal(moment.utc("2010-01","gggg-ww").format(),"2009-12-27T00:00:00+00:00","2010 week 1 (1st Jan Fri)");a.equal(moment.utc("2011-01","gggg-ww").format(),"2010-12-26T00:00:00+00:00","2011 week 1 (1st Jan Sat)");a.equal(moment.utc("2012-01","gggg-ww").format(),"2012-01-01T00:00:00+00:00","2012 week 1 (1st Jan Sun)");moment.defineLocale("dow:0,doy:6",null);a.done()},"parsing week year/week/weekday (dow 6, doy 12)":function(a){moment.locale("dow:6,doy:12",{week:{dow:6,doy:12}});a.equal(moment.utc("2007-01","gggg-ww").format(),"2006-12-30T00:00:00+00:00","2007 week 1 (1st Jan Mon)");a.equal(moment.utc("2008-01","gggg-ww").format(),"2007-12-29T00:00:00+00:00","2008 week 1 (1st Jan Tue)");a.equal(moment.utc("2003-01","gggg-ww").format(),"2002-12-28T00:00:00+00:00","2003 week 1 (1st Jan Wed)");a.equal(moment.utc("2009-01","gggg-ww").format(),"2008-12-27T00:00:00+00:00","2009 week 1 (1st Jan Thu)");a.equal(moment.utc("2010-01","gggg-ww").format(),"2009-12-26T00:00:00+00:00","2010 week 1 (1st Jan Fri)");a.equal(moment.utc("2011-01","gggg-ww").format(),"2011-01-01T00:00:00+00:00","2011 week 1 (1st Jan Sat)");a.equal(moment.utc("2012-01","gggg-ww").format(),"2011-12-31T00:00:00+00:00","2012 week 1 (1st Jan Sun)");a.done()},"parsing ISO with Z":function(d){var b,c,a=[["2011-10-08T18:04","2011-10-08T18:04:00.000"],["2011-10-08T18:04:20","2011-10-08T18:04:20.000"],["2011-10-08T18:04:20.1","2011-10-08T18:04:20.100"],["2011-10-08T18:04:20.11","2011-10-08T18:04:20.110"],["2011-10-08T18:04:20.111","2011-10-08T18:04:20.111"],["2011-W40-6T18","2011-10-08T18:00:00.000"],["2011-W40-6T18:04","2011-10-08T18:04:00.000"],["2011-W40-6T18:04:20","2011-10-08T18:04:20.000"],["2011-W40-6T18:04:20.1","2011-10-08T18:04:20.100"],["2011-W40-6T18:04:20.11","2011-10-08T18:04:20.110"],["2011-W40-6T18:04:20.111","2011-10-08T18:04:20.111"],["2011-281T18","2011-10-08T18:00:00.000"],["2011-281T18:04","2011-10-08T18:04:00.000"],["2011-281T18:04:20","2011-10-08T18:04:20.000"],["2011-281T18:04:20","2011-10-08T18:04:20.000"],["2011-281T18:04:20.1","2011-10-08T18:04:20.100"],["2011-281T18:04:20.11","2011-10-08T18:04:20.110"],["2011-281T18:04:20.111","2011-10-08T18:04:20.111"]];for(b=0;b<a.length;b++){c=moment(a[b][0]+"Z").utc();d.equal(c.format("YYYY-MM-DDTHH:mm:ss.SSS"),a[b][1],"moment should be able to parse ISO in UTC "+a[b][0]+"Z");c=moment(a[b][0]+" Z").utc();d.equal(c.format("YYYY-MM-DDTHH:mm:ss.SSS"),a[b][1],"moment should be able to parse ISO in UTC "+a[b][0]+" Z")}d.done()},"parsing iso with T":function(a){a.expect(8);a.equal(moment("2011-10-08T18")._f,"YYYY-MM-DDTHH","should include 'T' in the format");a.equal(moment("2011-10-08T18:20")._f,"YYYY-MM-DDTHH:mm","should include 'T' in the format");a.equal(moment("2011-10-08T18:20:13")._f,"YYYY-MM-DDTHH:mm:ss","should include 'T' in the format");a.equal(moment("2011-10-08T18:20:13.321")._f,"YYYY-MM-DDTHH:mm:ss.SSSS","should include 'T' in the format");a.equal(moment("2011-10-08 18")._f,"YYYY-MM-DD HH","should not include 'T' in the format");a.equal(moment("2011-10-08 18:20")._f,"YYYY-MM-DD HH:mm","should not include 'T' in the format");a.equal(moment("2011-10-08 18:20:13")._f,"YYYY-MM-DD HH:mm:ss","should not include 'T' in the format");a.equal(moment("2011-10-08 18:20:13.321")._f,"YYYY-MM-DD HH:mm:ss.SSSS","should not include 'T' in the format");a.done()},"parsing iso Z timezone":function(c){var b,a=[["2011-10-08T18:04Z","2011-10-08T18:04:00.000+00:00"],["2011-10-08T18:04:20Z","2011-10-08T18:04:20.000+00:00"],["2011-10-08T18:04:20.111Z","2011-10-08T18:04:20.111+00:00"]];c.expect(a.length);for(b=0;b<a.length;b++){c.equal(moment.utc(a[b][0]).format("YYYY-MM-DDTHH:mm:ss.SSSZ"),a[b][1],"moment should be able to parse ISO "+a[b][0])}c.done()},"parsing iso Z timezone into local":function(b){b.expect(1);var a=moment("2011-10-08T18:04:20.111Z");b.equal(a.utc().format("YYYY-MM-DDTHH:mm:ss.SSS"),"2011-10-08T18:04:20.111","moment should be able to parse ISO 2011-10-08T18:04:20.111Z");b.done()},"parsing iso with more subsecond precision digits":function(a){a.equal(moment.utc("2013-07-31T22:00:00.0000000Z").format(),"2013-07-31T22:00:00+00:00","more than 3 subsecond digits");a.done()},"null or empty":function(a){a.expect(8);a.equal(moment("").isValid(),false,"moment('') is not valid");a.equal(moment(null).isValid(),false,"moment(null) is not valid");a.equal(moment(null,"YYYY-MM-DD").isValid(),false,"moment('', 'format') is not valid");a.equal(moment("","YYYY-MM-DD").isValid(),false,"moment('', 'format') is not valid");a.equal(moment.utc("").isValid(),false,"moment.utc('') is not valid");a.equal(moment.utc(null).isValid(),false,"moment.utc(null) is not valid");a.equal(moment.utc(null,"YYYY-MM-DD").isValid(),false,"moment.utc(null) is not valid");a.equal(moment.utc("","YYYY-MM-DD").isValid(),false,"moment.utc('', 'YYYY-MM-DD') is not valid");a.done()},"first century":function(a){a.expect(9);a.equal(moment([0,0,1]).format("YYYY-MM-DD"),"0000-01-01","Year AD 0");a.equal(moment([99,0,1]).format("YYYY-MM-DD"),"0099-01-01","Year AD 99");a.equal(moment([999,0,1]).format("YYYY-MM-DD"),"0999-01-01","Year AD 999");a.equal(moment("0 1 1","YYYY MM DD").format("YYYY-MM-DD"),"0000-01-01","Year AD 0");a.equal(moment("99 1 1","YYYY MM DD").format("YYYY-MM-DD"),"0099-01-01","Year AD 99");a.equal(moment("999 1 1","YYYY MM DD").format("YYYY-MM-DD"),"0999-01-01","Year AD 999");a.equal(moment("0 1 1","YYYYY MM DD").format("YYYYY-MM-DD"),"00000-01-01","Year AD 0");a.equal(moment("99 1 1","YYYYY MM DD").format("YYYYY-MM-DD"),"00099-01-01","Year AD 99");a.equal(moment("999 1 1","YYYYY MM DD").format("YYYYY-MM-DD"),"00999-01-01","Year AD 999");a.done()},"six digit years":function(a){a.expect(8);a.equal(moment([-270000,0,1]).format("YYYYY-MM-DD"),"-270000-01-01","format BC 270,001");a.equal(moment([270000,0,1]).format("YYYYY-MM-DD"),"270000-01-01","format AD 270,000");a.equal(moment("-270000-01-01","YYYYY-MM-DD").toDate().getFullYear(),-270000,"parse BC 270,001");a.equal(moment("270000-01-01","YYYYY-MM-DD").toDate().getFullYear(),270000,"parse AD 270,000");a.equal(moment("+270000-01-01","YYYYY-MM-DD").toDate().getFullYear(),270000,"parse AD +270,000");a.equal(moment.utc("-270000-01-01","YYYYY-MM-DD").toDate().getUTCFullYear(),-270000,"parse utc BC 270,001");a.equal(moment.utc("270000-01-01","YYYYY-MM-DD").toDate().getUTCFullYear(),270000,"parse utc AD 270,000");a.equal(moment.utc("+270000-01-01","YYYYY-MM-DD").toDate().getUTCFullYear(),270000,"parse utc AD +270,000");a.done()},"negative four digit years":function(a){a.expect(2);a.equal(moment("-1000-01-01","YYYYY-MM-DD").toDate().getFullYear(),-1000,"parse BC 1,001");a.equal(moment.utc("-1000-01-01","YYYYY-MM-DD").toDate().getUTCFullYear(),-1000,"parse utc BC 1,001");a.done()},"strict parsing":function(a){a.equal(moment("2014-","YYYY-Q",true).isValid(),false,"fail missing quarter");a.equal(moment("2012-05","YYYY-MM",true).format("YYYY-MM"),"2012-05","parse correct string");a.equal(moment(" 2012-05","YYYY-MM",true).isValid(),false,"fail on extra whitespace");a.equal(moment("foo 2012-05","[foo] YYYY-MM",true).format("YYYY-MM"),"2012-05","handle fixed text");a.equal(moment("2012 05","YYYY-MM",true).isValid(),false,"fail on different separator");a.equal(moment("2012 05","YYYY MM DD",true).isValid(),false,"fail on too many tokens");a.equal(moment("05 30 2010",["DD MM YYYY","MM DD YYYY"],true).format("MM DD YYYY"),"05 30 2010","array with bad date");a.equal(moment("05 30 2010",["","MM DD YYYY"],true).format("MM DD YYYY"),"05 30 2010","array with invalid format");a.equal(moment("05 30 2010",[" DD MM YYYY","MM DD YYYY"],true).format("MM DD YYYY"),"05 30 2010","array with non-matching format");a.equal(moment("2010.*...","YYYY.*",true).isValid(),false,"invalid format with regex chars");a.equal(moment("2010.*","YYYY.*",true).year(),2010,"valid format with regex chars");a.equal(moment(".*2010.*",".*YYYY.*",true).year(),2010,"valid format with regex chars on both sides");a.equal(moment("-5-05-25","YYYY-MM-DD",true).isValid(),false,"invalid negative year");a.equal(moment("2-05-25","YYYY-MM-DD",true).isValid(),false,"invalid one-digit year");a.equal(moment("20-05-25","YYYY-MM-DD",true).isValid(),false,"invalid two-digit year");a.equal(moment("201-05-25","YYYY-MM-DD",true).isValid(),false,"invalid three-digit year");a.equal(moment("2010-05-25","YYYY-MM-DD",true).isValid(),true,"valid four-digit year");a.equal(moment("22010-05-25","YYYY-MM-DD",true).isValid(),false,"invalid five-digit year");a.equal(moment("12-05-25","YY-MM-DD",true).isValid(),true,"valid two-digit year");a.equal(moment("2012-05-25","YY-MM-DD",true).isValid(),false,"invalid four-digit year");a.equal(moment("-5-05-25","Y-MM-DD",true).isValid(),true,"valid negative year");a.equal(moment("2-05-25","Y-MM-DD",true).isValid(),true,"valid one-digit year");a.equal(moment("20-05-25","Y-MM-DD",true).isValid(),true,"valid two-digit year");a.equal(moment("201-05-25","Y-MM-DD",true).isValid(),true,"valid three-digit year");a.equal(moment("2012-5-25","YYYY-M-DD",true).isValid(),true,"valid one-digit month");a.equal(moment("2012-5-25","YYYY-MM-DD",true).isValid(),false,"invalid one-digit month");a.equal(moment("2012-05-25","YYYY-M-DD",true).isValid(),true,"valid one-digit month");a.equal(moment("2012-05-25","YYYY-MM-DD",true).isValid(),true,"valid one-digit month");a.equal(moment("2012-05-2","YYYY-MM-D",true).isValid(),true,"valid one-digit day");a.equal(moment("2012-05-2","YYYY-MM-DD",true).isValid(),false,"invalid one-digit day");a.equal(moment("2012-05-02","YYYY-MM-D",true).isValid(),true,"valid two-digit day");a.equal(moment("2012-05-02","YYYY-MM-DD",true).isValid(),true,"valid two-digit day");a.equal(moment("+002012-05-25","YYYYY-MM-DD",true).isValid(),true,"valid six-digit year");a.equal(moment("+2012-05-25","YYYYY-MM-DD",true).isValid(),false,"invalid four-digit year");a.equal(moment("1","S",true).isValid(),true,"valid one-digit milisecond");a.equal(moment("12","S",true).isValid(),false,"invalid two-digit milisecond");a.equal(moment("123","S",true).isValid(),false,"invalid three-digit milisecond");a.equal(moment("1","SS",true).isValid(),false,"invalid one-digit milisecond");a.equal(moment("12","SS",true).isValid(),true,"valid two-digit milisecond");a.equal(moment("123","SS",true).isValid(),false,"invalid three-digit milisecond");a.equal(moment("1","SSS",true).isValid(),false,"invalid one-digit milisecond");a.equal(moment("12","SSS",true).isValid(),false,"invalid two-digit milisecond");a.equal(moment("123","SSS",true).isValid(),true,"valid three-digit milisecond");a.done()},"parsing into a locale":function(a){a.expect(2);moment.defineLocale("parselocale",{months:"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve".split("_"),monthsShort:"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve".split("_")});moment.locale("en");a.equal(moment("2012 seven","YYYY MMM","parselocale").month(),6,"should be able to parse in a specific locale");moment.locale("parselocale");a.equal(moment("2012 july","YYYY MMM","en").month(),6,"should be able to parse in a specific locale");moment.defineLocale("parselocale",null);a.done()},"parsing week and weekday information":function(b){var a=getVerifier(b);a("12","gg","2012 01 01","week-year two digits");a("2012","gggg","2012 01 01","week-year four digits");a("99","gg","1998 12 27","week-year two digits previous year");a("1999","gggg","1998 12 27","week-year four digits previous year");a("99","GG","1999 01 04","iso week-year two digits");a("1999","GGGG","1999 01 04","iso week-year four digits");a("13","GG","2012 12 31","iso week-year two digits previous year");a("2013","GGGG","2012 12 31","iso week-year four digits previous year");a("1999 37","gggg w","1999 09 05","week");a("1999 37","gggg ww","1999 09 05","week double");a("1999 37","GGGG W","1999 09 13","iso week");a("1999 37","GGGG WW","1999 09 13","iso week double");a("1999 37 4","GGGG WW E","1999 09 16","iso day");a("1999 37 04","GGGG WW E","1999 09 16","iso day wide",true);a("1999 37 4","gggg ww e","1999 09 09","day");a("1999 37 04","gggg ww e","1999 09 09","day wide",true);a("1999 37 4","gggg ww d","1999 09 09","d");a("1999 37 Th","gggg ww dd","1999 09 09","dd");a("1999 37 Thu","gggg ww ddd","1999 09 09","ddd");a("1999 37 Thursday","gggg ww dddd","1999 09 09","dddd");b.equal(moment("22","ww").week(),22,"week sets the week by itself");b.equal(moment("22","ww").weekYear(),moment().weekYear(),"week keeps this year");b.equal(moment("2012 22","YYYY ww").weekYear(),2012,"week keeps parsed year");b.equal(moment("22","WW").isoWeek(),22,"iso week sets the week by itself");b.equal(moment("2012 22","YYYY WW").weekYear(),2012,"iso week keeps parsed year");b.equal(moment("22","WW").weekYear(),moment().weekYear(),"iso week keeps this year");a("6 2013 2","e gggg w","2013 01 12","order doesn't matter");a("6 2013 2","E GGGG W","2013 01 12","iso order doesn't matter");b.equal(moment("1999-W37-4 3:30","GGGG-[W]WW-E HH:mm").format("YYYY MM DD HH:mm"),"1999 09 16 03:30","parsing weeks and hours");if(new Date("1300-01-01").getUTCFullYear()===1300){a("0098-06","GGGG-WW","0098 02 03","small years work",true)}b.done()},"parsing localized weekdays":function(b){var a=getVerifier(b);try{moment.locale("fr");a("1999 37 4","GGGG WW E","1999 09 16","iso ignores locale");a("1999 37 7","GGGG WW E","1999 09 19","iso ignores locale");a("1999 37 0","gggg ww e","1999 09 13","localized e uses local doy and dow: 0 = monday");a("1999 37 4","gggg ww e","1999 09 17","localized e uses local doy and dow: 4 = friday");a("1999 37 1","gggg ww d","1999 09 13","localized d uses 0-indexed days: 1 = monday");a("1999 37 Lu","gggg ww dd","1999 09 13","localized d uses 0-indexed days: Mo");a("1999 37 lun.","gggg ww ddd","1999 09 13","localized d uses 0-indexed days: Mon");a("1999 37 lundi","gggg ww dddd","1999 09 13","localized d uses 0-indexed days: Monday");a("1999 37 4","gggg ww d","1999 09 16","localized d uses 0-indexed days: 4");a("1999 37 0","gggg ww d","1999 09 19","localized d uses 0-indexed days: 0 = sund");a("1999 37 Di","gggg ww dd","1999 09 19","localized d uses 0-indexed days: 0 = sund")}finally{moment.locale("en");b.done()}},"parsing with customized two-digit year":function(b){var a=moment.parseTwoDigitYear;try{b.equal(moment("68","YY").year(),2068);b.equal(moment("69","YY").year(),1969);moment.parseTwoDigitYear=function(c){return +c+(+c>30?1900:2000)};b.equal(moment("68","YY").year(),1968);b.equal(moment("67","YY").year(),1967);b.equal(moment("31","YY").year(),1931);b.equal(moment("30","YY").year(),2030)}finally{moment.parseTwoDigitYear=a;b.done()}}};