var moment=require("../../moment");exports.utc={setUp:function(a){moment.locale("en");moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};a()},tearDown:function(a){moment.locale("en");a()},"utc and local":function(d){d.expect(7);var a=moment(Date.UTC(2011,1,2,3,4,5,6)),b,c;a.utc();d.equal(a.date(),2,"the day should be correct for utc");d.equal(a.day(),3,"the date should be correct for utc");d.equal(a.hours(),3,"the hours should be correct for utc");a.local();if(a.zone()>180){d.equal(a.date(),1,"the date should be correct for local");d.equal(a.day(),2,"the day should be correct for local")}else{d.equal(a.date(),2,"the date should be correct for local");d.equal(a.day(),3,"the day should be correct for local")}b=Math.ceil(a.zone()/60);c=(24+3-b)%24;d.equal(a.hours(),c,"the hours ("+a.hours()+") should be correct for local");d.equal(moment().utc().zone(),0,"timezone in utc should always be zero");d.done()},"creating with utc and no arguments":function(d){d.expect(2);var b=new Date().valueOf(),a=moment.utc().valueOf(),c=new Date().valueOf();d.ok(b<=a,"moment UTC default time should be now, not in the past");d.ok(a<=c,"moment UTC default time should be now, not in the future");d.done()},"creating with utc and a date parameter array":function(b){b.expect(6);var a=moment.utc([2011,1,2,3,4,5,6]);b.equal(a.date(),2,"the day should be correct for utc array");b.equal(a.hours(),3,"the hours should be correct for utc array");a=moment.utc("2011-02-02 3:04:05","YYYY-MM-DD HH:mm:ss");b.equal(a.date(),2,"the day should be correct for utc parsing format");b.equal(a.hours(),3,"the hours should be correct for utc parsing format");a=moment.utc("2011-02-02T03:04:05+00:00");b.equal(a.date(),2,"the day should be correct for utc parsing iso");b.equal(a.hours(),3,"the hours should be correct for utc parsing iso");b.done()},"creating with utc without timezone":function(b){b.expect(4);var a=moment.utc("2012-01-02T08:20:00");b.equal(a.date(),2,"the day should be correct for utc parse without timezone");b.equal(a.hours(),8,"the hours should be correct for utc parse without timezone");a=moment.utc("2012-01-02T08:20:00+09:00");b.equal(a.date(),1,"the day should be correct for utc parse with timezone");b.equal(a.hours(),23,"the hours should be correct for utc parse with timezone");b.done()},"cloning with utc":function(b){b.expect(4);var a=moment.utc("2012-01-02T08:20:00");b.equal(moment.utc(a)._isUTC,true,"the local zone should be converted to UTC");b.equal(moment.utc(a.clone().utc())._isUTC,true,"the local zone should stay in UTC");a.zone(120);b.equal(moment.utc(a)._isUTC,true,"the explicit zone should stay in UTC");b.equal(moment.utc(a).zone(),0,"the explicit zone should have an offset of 0");b.done()},"weekday with utc":function(a){a.expect(1);a.equal(moment("2013-09-15T00:00:00Z").utc().weekday(),moment("2013-09-15T23:59:00Z").utc().weekday(),"a UTC-moment's .weekday() should not be affected by the local timezone");a.done()}};