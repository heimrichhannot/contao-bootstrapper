var moment=require("../../moment");exports.format={setUp:function(b){moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};b()},"format YY":function(d){d.expect(1);var b=moment(new Date(2009,1,14,15,25,50,125));d.equal(b.format("YY"),"09","YY ---> 09");d.done()},"format escape brackets":function(d){d.expect(10);moment.locale("en");var b=moment(new Date(2009,1,14,15,25,50,125));d.equal(b.format("[day]"),"day","Single bracket");d.equal(b.format("[day] YY [YY]"),"day 09 YY","Double bracket");d.equal(b.format("[YY"),"[09","Un-ended bracket");d.equal(b.format("[[YY]]"),"[YY]","Double nested brackets");d.equal(b.format("[[]"),"[","Escape open bracket");d.equal(b.format("[Last]"),"Last","localized tokens");d.equal(b.format("[L] L"),"L 02/14/2009","localized tokens with escaped localized tokens");d.equal(b.format("[L LL LLL LLLL aLa]"),"L LL LLL LLLL aLa","localized tokens with escaped localized tokens");d.equal(b.format("[LLL] LLL"),"LLL February 14, 2009 3:25 PM","localized tokens with escaped localized tokens (recursion)");d.equal(b.format("YYYY[\n]DD[\n]"),"2009\n14\n","Newlines");d.done()},"handle negative years":function(b){b.expect(10);moment.locale("en");b.equal(moment.utc().year(-1).format("YY"),"-01","YY with negative year");b.equal(moment.utc().year(-1).format("YYYY"),"-0001","YYYY with negative year");b.equal(moment.utc().year(-12).format("YY"),"-12","YY with negative year");b.equal(moment.utc().year(-12).format("YYYY"),"-0012","YYYY with negative year");b.equal(moment.utc().year(-123).format("YY"),"-23","YY with negative year");b.equal(moment.utc().year(-123).format("YYYY"),"-0123","YYYY with negative year");b.equal(moment.utc().year(-1234).format("YY"),"-34","YY with negative year");b.equal(moment.utc().year(-1234).format("YYYY"),"-1234","YYYY with negative year");b.equal(moment.utc().year(-12345).format("YY"),"-45","YY with negative year");b.equal(moment.utc().year(-12345).format("YYYY"),"-12345","YYYY with negative year");b.done()},"format milliseconds":function(d){d.expect(6);var b=moment(new Date(2009,1,14,15,25,50,123));d.equal(b.format("S"),"1","Deciseconds");d.equal(b.format("SS"),"12","Centiseconds");d.equal(b.format("SSS"),"123","Milliseconds");b.milliseconds(789);d.equal(b.format("S"),"7","Deciseconds");d.equal(b.format("SS"),"78","Centiseconds");d.equal(b.format("SSS"),"789","Milliseconds");d.done()},"format timezone":function(e){e.expect(2);var b=moment(new Date(2010,1,14,15,25,50,125)),f="moment().format('z') = "+b.format("z")+" It should be something like 'PST'";if(moment().zone()===-60){f+="For UTC+1 this is a known issue, see https://github.com/timrwood/moment/issues/162"}e.ok(b.format("Z").match(/^[\+\-]\d\d:\d\d$/),b.format("Z")+" should be something like '+07:30'");e.ok(b.format("ZZ").match(/^[\+\-]\d{4}$/),b.format("ZZ")+" should be something like '+0700'");e.done()},"format multiple with zone":function(d){d.expect(1);var b=moment("2012-10-08 -1200",["YYYY-MM-DD HH:mm ZZ","YYYY-MM-DD ZZ","YYYY-MM-DD"]);d.equals(b.format("YYYY-MM"),"2012-10","Parsing multiple formats should not crash with different sized formats");d.done()},isDST:function(j){j.expect(2);var i=new Date(2011,0,1).getTimezoneOffset(),k=new Date(2011,6,1).getTimezoneOffset(),n=i<k,l=k<i,h=moment([2011]),m=moment([2011,6]);if(n&&l){j.ok(0,"January and July cannot both be in DST");j.ok(0,"January and July cannot both be in DST")}else{if(n){j.ok(h.isDST(),"January 1 is DST");j.ok(!m.isDST(),"July 1 is not DST")}else{if(l){j.ok(!h.isDST(),"January 1 is not DST");j.ok(m.isDST(),"July 1 is DST")}else{j.ok(!h.isDST(),"January 1 is not DST");j.ok(!m.isDST(),"July 1 is not DST")}}}j.done()},"unix timestamp":function(c){c.expect(5);var d=moment("1234567890.123","X");c.equals(d.format("X"),"1234567890","unix timestamp without milliseconds");c.equals(d.format("X.S"),"1234567890.1","unix timestamp with deciseconds");c.equals(d.format("X.SS"),"1234567890.12","unix timestamp with centiseconds");c.equals(d.format("X.SSS"),"1234567890.123","unix timestamp with milliseconds");d=moment(1234567890.123,"X");c.equals(d.format("X"),"1234567890","unix timestamp as integer");c.done()},zone:function(b){b.expect(3);if(moment().zone()>0){b.ok(moment().format("ZZ").indexOf("-")>-1,"When the zone() offset is greater than 0, the ISO offset should be less than zero")}if(moment().zone()<0){b.ok(moment().format("ZZ").indexOf("+")>-1,"When the zone() offset is less than 0, the ISO offset should be greater than zero")}if(moment().zone()===0){b.ok(moment().format("ZZ").indexOf("+")>-1,"When the zone() offset is equal to 0, the ISO offset should be positive zero")}if(moment().zone()===0){b.equal(moment().zone(),0,"moment.fn.zone should be a multiple of 15 (was "+moment().zone()+")")}else{b.equal(moment().zone()%15,0,"moment.fn.zone should be a multiple of 15 (was "+moment().zone()+")")}b.equal(moment().zone(),new Date().getTimezoneOffset(),"zone should equal getTimezoneOffset");b.done()},"default format":function(c){c.expect(1);var d=/\d{4}.\d\d.\d\dT\d\d.\d\d.\d\d[\+\-]\d\d:\d\d/;c.ok(d.exec(moment().format()),"default format ("+moment().format()+") should match ISO");c.done()},"escaping quotes":function(c){c.expect(4);moment.locale("en");var d=moment([2012,0]);c.equal(d.format("MMM 'YY"),"Jan '12","Should be able to format with single parenthesis");c.equal(d.format("MMM 'YY"),"Jan '12","Should be able to format with double parenthesis");c.equal(d.format("MMM 'YY"),"Jan '12","Should be able to format with single parenthesis");c.equal(d.format("MMM 'YY"),"Jan '12","Should be able to format with double parenthesis");c.done()},toJSON:function(f){var d=typeof JSON!=="undefined"&&JSON.stringify&&JSON.stringify.call,e=moment("2012-10-09T21:30:40.678+0100");f.expect(d?2:1);f.equal(e.toJSON(),"2012-10-09T20:30:40.678Z","should output ISO8601 on moment.fn.toJSON");if(d){f.equal(JSON.stringify({date:e}),'{"date":"2012-10-09T20:30:40.678Z"}',"should output ISO8601 on JSON.stringify")}f.done()},toISOString:function(c){c.expect(4);var d=moment.utc("2012-10-09T20:30:40.678");c.equal(d.toISOString(),"2012-10-09T20:30:40.678Z","should output ISO8601 on moment.fn.toISOString");d=moment.utc("+020123-10-09T20:30:40.678");c.equal(d.toISOString(),"+020123-10-09T20:30:40.678Z","ISO8601 format on big positive year");d=moment.utc("-000001-10-09T20:30:40.678");c.equal(d.toISOString(),"-000001-10-09T20:30:40.678Z","ISO8601 format on negative year");d=moment.utc("-020123-10-09T20:30:40.678");c.equal(d.toISOString(),"-020123-10-09T20:30:40.678Z","ISO8601 format on big negative year");c.done()},"long years":function(b){b.expect(6);b.equal(moment.utc().year(2).format("YYYYYY"),"+000002","small year with YYYYYY");b.equal(moment.utc().year(2012).format("YYYYYY"),"+002012","regular year with YYYYYY");b.equal(moment.utc().year(20123).format("YYYYYY"),"+020123","big year with YYYYYY");b.equal(moment.utc().year(-1).format("YYYYYY"),"-000001","small negative year with YYYYYY");b.equal(moment.utc().year(-2012).format("YYYYYY"),"-002012","negative year with YYYYYY");b.equal(moment.utc().year(-20123).format("YYYYYY"),"-020123","big negative year with YYYYYY");b.done()},"iso week formats":function(i){var l={"2005-01-02":"2004-53","2005-12-31":"2005-52","2007-01-01":"2007-01","2007-12-30":"2007-52","2007-12-31":"2008-01","2008-01-01":"2008-01","2008-12-28":"2008-52","2008-12-29":"2009-01","2008-12-30":"2009-01","2008-12-31":"2009-01","2009-01-01":"2009-01","2009-12-31":"2009-53","2010-01-01":"2009-53","2010-01-02":"2009-53","2010-01-03":"2009-53","404-12-31":"0404-53","405-12-31":"0405-52"},g,h,k,j;for(g in l){h=l[g].split("-").pop();k=moment(g,"YYYY-MM-DD").format("WW");i.equal(h,k,g+": WW should be "+h+", but "+k);h=h.replace(/^0+/,"");j=moment(g,"YYYY-MM-DD").format("W");i.equal(h,j,g+": W should be "+h+", but "+j)}i.done()},"iso week year formats":function(j){var m={"2005-01-02":"2004-53","2005-12-31":"2005-52","2007-01-01":"2007-01","2007-12-30":"2007-52","2007-12-31":"2008-01","2008-01-01":"2008-01","2008-12-28":"2008-52","2008-12-29":"2009-01","2008-12-30":"2009-01","2008-12-31":"2009-01","2009-01-01":"2009-01","2009-12-31":"2009-53","2010-01-01":"2009-53","2010-01-02":"2009-53","2010-01-03":"2009-53","404-12-31":"0404-53","405-12-31":"0405-52"},h,k,i,n,l;for(h in m){k=m[h].split("-")[0];i=moment(h,"YYYY-MM-DD").format("GGGGG");j.equal("0"+k,i,h+": GGGGG should be "+k+", but "+i);n=moment(h,"YYYY-MM-DD").format("GGGG");j.equal(k,n,h+": GGGG should be "+k+", but "+n);l=moment(h,"YYYY-MM-DD").format("GG");j.equal(k.slice(2,4),l,h+": GG should be "+k+", but "+l)}j.done()},"week year formats":function(j){var m={"2005-01-02":"2004-53","2005-12-31":"2005-52","2007-01-01":"2007-01","2007-12-30":"2007-52","2007-12-31":"2008-01","2008-01-01":"2008-01","2008-12-28":"2008-52","2008-12-29":"2009-01","2008-12-30":"2009-01","2008-12-31":"2009-01","2009-01-01":"2009-01","2009-12-31":"2009-53","2010-01-01":"2009-53","2010-01-02":"2009-53","2010-01-03":"2009-53","404-12-31":"0404-53","405-12-31":"0405-52"},h,k,i,n,l;moment.locale("en-gb");for(h in m){k=m[h].split("-")[0];i=moment(h,"YYYY-MM-DD").format("ggggg");j.equal("0"+k,i,h+": ggggg should be "+k+", but "+i);n=moment(h,"YYYY-MM-DD").format("gggg");j.equal(k,n,h+": gggg should be "+k+", but "+n);l=moment(h,"YYYY-MM-DD").format("gg");j.equal(k.slice(2,4),l,h+": gg should be "+k+", but "+l)}j.done()},"iso weekday formats":function(b){b.expect(7);b.equal(moment([1985,1,4]).format("E"),"1","Feb  4 1985 is Monday    -- 1st day");b.equal(moment([2029,8,18]).format("E"),"2","Sep 18 2029 is Tuesday   -- 2nd day");b.equal(moment([2013,3,24]).format("E"),"3","Apr 24 2013 is Wednesday -- 3rd day");b.equal(moment([2015,2,5]).format("E"),"4","Mar  5 2015 is Thursday  -- 4th day");b.equal(moment([1970,0,2]).format("E"),"5","Jan  2 1970 is Friday    -- 5th day");b.equal(moment([2001,4,12]).format("E"),"6","May 12 2001 is Saturday  -- 6th day");b.equal(moment([2000,0,2]).format("E"),"7","Jan  2 2000 is Sunday    -- 7th day");b.done()},"weekday formats":function(b){b.expect(7);moment.locale("dow: 3,doy: 5",{week:{dow:3,doy:5}});b.equal(moment([1985,1,6]).format("e"),"0","Feb  6 1985 is Wednesday -- 0th day");b.equal(moment([2029,8,20]).format("e"),"1","Sep 20 2029 is Thursday  -- 1st day");b.equal(moment([2013,3,26]).format("e"),"2","Apr 26 2013 is Friday    -- 2nd day");b.equal(moment([2015,2,7]).format("e"),"3","Mar  7 2015 is Saturday  -- 3nd day");b.equal(moment([1970,0,4]).format("e"),"4","Jan  4 1970 is Sunday    -- 4th day");b.equal(moment([2001,4,14]).format("e"),"5","May 14 2001 is Monday    -- 5th day");b.equal(moment([2000,0,4]).format("e"),"6","Jan  4 2000 is Tuesday   -- 6th day");b.done()},"toString is just human readable format":function(d){d.expect(1);var b=moment(new Date(2009,1,5,15,25,50,125));d.equal(b.toString(),b.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ"));d.done()},"toJSON skips postformat":function(b){b.expect(1);moment.locale("postformat",{postformat:function(a){a.replace(/./g,"X")}});b.equal(moment.utc([2000,0,1]).toJSON(),"2000-01-01T00:00:00.000Z","toJSON doesn't postformat");moment.locale("postformat",null);b.done()},"calendar day timezone":function(a){a.expect(11);moment.locale("en");var n=[60,-60,90,-90,360,-360,720,-720],p=moment().utc().startOf("day").subtract({m:1}),b=moment().local().startOf("day").subtract({m:1}),c=moment().local().startOf("day").subtract({d:2}),i,d,o;for(i=0;i<n.length;++i){d=n[i];o=moment().zone(d).startOf("day").subtract({m:1});a.equal(moment(o).zone(d).calendar(),"Yesterday at 11:59 PM","Yesterday at 11:59 PM, not Today, or the wrong time")}a.equal(moment(p).utc().calendar(),"Yesterday at 11:59 PM","Yesterday at 11:59 PM, not Today, or the wrong time");a.equal(moment(b).local().calendar(),"Yesterday at 11:59 PM","Yesterday at 11:59 PM, not Today, or the wrong time");a.equal(moment(b).local().calendar(c),"Tomorrow at 11:59 PM","Tomorrow at 11:59 PM, not Yesterday, or the wrong time");a.done()},invalid:function(b){moment.locale("en");b.equal(moment.invalid().format(),"Invalid date");b.equal(moment.invalid().format("YYYY-MM-DD"),"Invalid date");b.done()},"quarter formats":function(b){b.expect(7);b.equal(moment([1985,1,4]).format("Q"),"1","Feb  4 1985 is Q1");b.equal(moment([2029,8,18]).format("Q"),"3","Sep 18 2029 is Q3");b.equal(moment([2013,3,24]).format("Q"),"2","Apr 24 2013 is Q2");b.equal(moment([2015,2,5]).format("Q"),"1","Mar  5 2015 is Q1");b.equal(moment([1970,0,2]).format("Q"),"1","Jan  2 1970 is Q1");b.equal(moment([2001,11,12]).format("Q"),"4","Dec 12 2001 is Q4");b.equal(moment([2000,0,2]).format("[Q]Q-YYYY"),"Q1-2000","Jan  2 2000 is Q1");b.done()}};