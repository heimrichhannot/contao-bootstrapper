var moment=require("../../moment");exports.utc={setUp:function(b){moment.locale("en");moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};b()},tearDown:function(b){moment.locale("en");b()},"utc and local":function(g){g.expect(7);var f=moment(Date.UTC(2011,1,2,3,4,5,6)),e,h;f.utc();g.equal(f.date(),2,"the day should be correct for utc");g.equal(f.day(),3,"the date should be correct for utc");g.equal(f.hours(),3,"the hours should be correct for utc");f.local();if(f.zone()>180){g.equal(f.date(),1,"the date should be correct for local");g.equal(f.day(),2,"the day should be correct for local")}else{g.equal(f.date(),2,"the date should be correct for local");g.equal(f.day(),3,"the day should be correct for local")}e=Math.ceil(f.zone()/60);h=(24+3-e)%24;g.equal(f.hours(),h,"the hours ("+f.hours()+") should be correct for local");g.equal(moment().utc().zone(),0,"timezone in utc should always be zero");g.done()},"creating with utc and no arguments":function(g){g.expect(2);var e=new Date().valueOf(),f=moment.utc().valueOf(),h=new Date().valueOf();g.ok(e<=f,"moment UTC default time should be now, not in the past");g.ok(f<=h,"moment UTC default time should be now, not in the future");g.done()},"creating with utc and a date parameter array":function(c){c.expect(6);var d=moment.utc([2011,1,2,3,4,5,6]);c.equal(d.date(),2,"the day should be correct for utc array");c.equal(d.hours(),3,"the hours should be correct for utc array");d=moment.utc("2011-02-02 3:04:05","YYYY-MM-DD HH:mm:ss");c.equal(d.date(),2,"the day should be correct for utc parsing format");c.equal(d.hours(),3,"the hours should be correct for utc parsing format");d=moment.utc("2011-02-02T03:04:05+00:00");c.equal(d.date(),2,"the day should be correct for utc parsing iso");c.equal(d.hours(),3,"the hours should be correct for utc parsing iso");c.done()},"creating with utc without timezone":function(c){c.expect(4);var d=moment.utc("2012-01-02T08:20:00");c.equal(d.date(),2,"the day should be correct for utc parse without timezone");c.equal(d.hours(),8,"the hours should be correct for utc parse without timezone");d=moment.utc("2012-01-02T08:20:00+09:00");c.equal(d.date(),1,"the day should be correct for utc parse with timezone");c.equal(d.hours(),23,"the hours should be correct for utc parse with timezone");c.done()},"cloning with utc":function(c){c.expect(4);var d=moment.utc("2012-01-02T08:20:00");c.equal(moment.utc(d)._isUTC,true,"the local zone should be converted to UTC");c.equal(moment.utc(d.clone().utc())._isUTC,true,"the local zone should stay in UTC");d.zone(120);c.equal(moment.utc(d)._isUTC,true,"the explicit zone should stay in UTC");c.equal(moment.utc(d).zone(),0,"the explicit zone should have an offset of 0");c.done()},"weekday with utc":function(b){b.expect(1);b.equal(moment("2013-09-15T00:00:00Z").utc().weekday(),moment("2013-09-15T23:59:00Z").utc().weekday(),"a UTC-moment's .weekday() should not be affected by the local timezone");b.done()}};