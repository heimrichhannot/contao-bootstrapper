var moment=require("../../moment");exports.locale={setUp:function(a){moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};moment.locale("en");a()},"library getters and setters":function(b){var a=moment.locale("en");b.equal(a,"en","locale should return en by default");b.equal(moment.locale(),"en","locale should return en by default");moment.locale("fr");b.equal(moment.locale(),"fr","locale should return the changed locale");moment.locale("en-gb");b.equal(moment.locale(),"en-gb","locale should return the changed locale");moment.locale("en");b.equal(moment.locale(),"en","locale should reset");moment.locale("does-not-exist");b.equal(moment.locale(),"en","locale should reset");moment.locale("EN");b.equal(moment.locale(),"en","Normalize locale key case");moment.locale("EN_gb");b.equal(moment.locale(),"en-gb","Normalize locale key underscore");b.done()},"library setter array of locales":function(a){a.equal(moment.locale(["non-existent","fr","also-non-existent"]),"fr","passing an array uses the first valid locale");a.equal(moment.locale(["es","fr","also-non-existent"]),"es","passing an array uses the first valid locale");a.done()},"library setter locale substrings":function(a){a.equal(moment.locale("fr-crap"),"fr","use substrings");a.equal(moment.locale("fr-does-not-exist"),"fr","uses deep substrings");a.equal(moment.locale("fr-CA-does-not-exist"),"fr-ca","uses deepest substring");a.done()},"library getter locale array and substrings":function(a){a.equals(moment.locale(["en-CH","fr"]),"en","prefer root locale to shallower ones");a.equals(moment.locale(["en-gb-leeds","en-CA"]),"en-gb","prefer root locale to shallower ones");a.equals(moment.locale(["en-fake","en-CA"]),"en-ca","prefer alternatives with shared roots");a.equals(moment.locale(["en-fake","en-fake2","en-ca"]),"en-ca","prefer alternatives with shared roots");a.equals(moment.locale(["fake-CA","fake-MX","fr"]),"fr","always find something if possible");a.equals(moment.locale(["fake-CA","fake-MX","fr"]),"fr","always find something if possible");a.equals(moment.locale(["fake-CA","fake-MX","fr-fake-fake-fake"]),"fr","always find something if possible");a.equals(moment.locale(["en","en-CA"]),"en","prefer earlier if it works");a.done()},"library ensure inheritance":function(a){moment.locale("made-up",{months:"February_March_April_May_June_July_August_September_October_November_December_January".split("_")});a.equal(moment([2012,5,6]).format("MMMM"),"July","Override some of the configs");a.equal(moment([2012,5,6]).format("MMM"),"Jun","But not all of them");a.done()},"library ensure inheritance LT L LL LLL LLLL":function(b){var a="test-inherit-lt";moment.defineLocale(a,{longDateFormat:{LT:"-[LT]-",L:"-[L]-",LL:"-[LL]-",LLL:"-[LLL]-",LLLL:"-[LLLL]-"},calendar:{sameDay:"[sameDay] LT",nextDay:"[nextDay] L",nextWeek:"[nextWeek] LL",lastDay:"[lastDay] LLL",lastWeek:"[lastWeek] LLLL",sameElse:"L"}});moment.locale("es");b.equal(moment().locale(a).calendar(),"sameDay -LT-","Should use instance locale in LT formatting");b.equal(moment().add(1,"days").locale(a).calendar(),"nextDay -L-","Should use instance locale in L formatting");b.equal(moment().add(-1,"days").locale(a).calendar(),"lastDay -LLL-","Should use instance locale in LL formatting");b.equal(moment().add(4,"days").locale(a).calendar(),"nextWeek -LL-","Should use instance locale in LLL formatting");b.equal(moment().add(-4,"days").locale(a).calendar(),"lastWeek -LLLL-","Should use instance locale in LLLL formatting");b.done()},"library localeData":function(b){b.expect(3);moment.locale("en");var a=moment([2000,0]);b.equal(moment.localeData().months(a),"January","no arguments returns global");b.equal(moment.localeData("zh-cn").months(a),"一月","a string returns the locale based on key");b.equal(moment.localeData(moment().locale("es")).months(a),"enero","if you pass in a moment it uses the moment's locale");b.done()},"library deprecations":function(a){moment.lang("dude",{months:["Movember"]});a.equal(moment.locale(),"dude","setting the lang sets the locale");a.equal(moment.lang(),moment.locale());a.equal(moment.langData(),moment.localeData(),"langData is localeData");a.done()},defineLocale:function(a){moment.locale("en");moment.defineLocale("dude",{months:["Movember"]});a.equal(moment().locale(),"dude","defineLocale also sets it");a.equal(moment().locale("dude").locale(),"dude","defineLocale defines a locale");a.done()},"library convenience":function(a){moment.locale("something",{week:{dow:3}});moment.locale("something");a.equal(moment.locale(),"something","locale can be used to create the locale too");a.done()},"instance locale method":function(a){moment.locale("en");a.equal(moment([2012,5,6]).format("MMMM"),"June","Normally default to global");a.equal(moment([2012,5,6]).locale("es").format("MMMM"),"junio","Use the instance specific locale");a.equal(moment([2012,5,6]).format("MMMM"),"June","Using an instance specific locale does not affect other moments");a.done()},"instance locale method with array":function(b){var a=moment().locale(["non-existent","fr","also-non-existent"]);b.equal(a.locale(),"fr","passing an array uses the first valid locale");a=moment().locale(["es","fr","also-non-existent"]);b.equal(a.locale(),"es","passing an array uses the first valid locale");b.done()},"instance getter locale substrings":function(b){var a=moment();a.locale("fr-crap");b.equal(a.locale(),"fr","use substrings");a.locale("fr-does-not-exist");b.equal(a.locale(),"fr","uses deep substrings");b.done()},"instance locale persists with manipulation":function(a){a.expect(3);moment.locale("en");a.equal(moment([2012,5,6]).locale("es").add({days:1}).format("MMMM"),"junio","With addition");a.equal(moment([2012,5,6]).locale("es").day(0).format("MMMM"),"junio","With day getter");a.equal(moment([2012,5,6]).locale("es").endOf("day").format("MMMM"),"junio","With endOf");a.done()},"instance locale persists with cloning":function(g){g.expect(2);moment.locale("en");var e=moment([2012,5,6]).locale("es"),d=e.clone(),f=moment(e);g.equal(d.format("MMMM"),"junio","using moment.fn.clone()");g.equal(d.format("MMMM"),"junio","using moment()");g.done()},"duration locale method":function(a){a.expect(3);moment.locale("en");a.equal(moment.duration({seconds:44}).humanize(),"a few seconds","Normally default to global");a.equal(moment.duration({seconds:44}).locale("es").humanize(),"unos segundos","Use the instance specific locale");a.equal(moment.duration({seconds:44}).humanize(),"a few seconds","Using an instance specific locale does not affect other durations");a.done()},"duration locale persists with cloning":function(e){e.expect(1);moment.locale("en");var d=moment.duration({seconds:44}).locale("es"),c=moment.duration(d);e.equal(c.humanize(),"unos segundos","using moment.duration()");e.done()},"changing the global locale doesn't affect existing duration instances":function(b){var a=moment.duration();moment.locale("fr");b.equal("en",a.locale());b.done()},"duration deprecations":function(a){a.equal(moment.duration().lang(),moment.duration().localeData(),"duration.lang is the same as duration.localeData");a.done()},"from relative time future":function(b){var a=moment([2007,1,28]);b.equal(a.from(moment([2007,1,28]).subtract({s:44})),"in a few seconds","44 seconds = a few seconds");b.equal(a.from(moment([2007,1,28]).subtract({s:45})),"in a minute","45 seconds = a minute");b.equal(a.from(moment([2007,1,28]).subtract({s:89})),"in a minute","89 seconds = a minute");b.equal(a.from(moment([2007,1,28]).subtract({s:90})),"in 2 minutes","90 seconds = 2 minutes");b.equal(a.from(moment([2007,1,28]).subtract({m:44})),"in 44 minutes","44 minutes = 44 minutes");b.equal(a.from(moment([2007,1,28]).subtract({m:45})),"in an hour","45 minutes = an hour");b.equal(a.from(moment([2007,1,28]).subtract({m:89})),"in an hour","89 minutes = an hour");b.equal(a.from(moment([2007,1,28]).subtract({m:90})),"in 2 hours","90 minutes = 2 hours");b.equal(a.from(moment([2007,1,28]).subtract({h:5})),"in 5 hours","5 hours = 5 hours");b.equal(a.from(moment([2007,1,28]).subtract({h:21})),"in 21 hours","21 hours = 21 hours");b.equal(a.from(moment([2007,1,28]).subtract({h:22})),"in a day","22 hours = a day");b.equal(a.from(moment([2007,1,28]).subtract({h:35})),"in a day","35 hours = a day");b.equal(a.from(moment([2007,1,28]).subtract({h:36})),"in 2 days","36 hours = 2 days");b.equal(a.from(moment([2007,1,28]).subtract({d:1})),"in a day","1 day = a day");b.equal(a.from(moment([2007,1,28]).subtract({d:5})),"in 5 days","5 days = 5 days");b.equal(a.from(moment([2007,1,28]).subtract({d:25})),"in 25 days","25 days = 25 days");b.equal(a.from(moment([2007,1,28]).subtract({d:26})),"in a month","26 days = a month");b.equal(a.from(moment([2007,1,28]).subtract({d:30})),"in a month","30 days = a month");b.equal(a.from(moment([2007,1,28]).subtract({d:45})),"in a month","45 days = a month");b.equal(a.from(moment([2007,1,28]).subtract({d:47})),"in 2 months","47 days = 2 months");b.equal(a.from(moment([2007,1,28]).subtract({d:74})),"in 2 months","74 days = 2 months");b.equal(a.from(moment([2007,1,28]).subtract({d:78})),"in 3 months","78 days = 3 months");b.equal(a.from(moment([2007,1,28]).subtract({M:1})),"in a month","1 month = a month");b.equal(a.from(moment([2007,1,28]).subtract({M:5})),"in 5 months","5 months = 5 months");b.equal(a.from(moment([2007,1,28]).subtract({d:315})),"in 10 months","315 days = 10 months");b.equal(a.from(moment([2007,1,28]).subtract({d:344})),"in a year","344 days = a year");b.equal(a.from(moment([2007,1,28]).subtract({d:345})),"in a year","345 days = a year");b.equal(a.from(moment([2007,1,28]).subtract({d:548})),"in 2 years","548 days = in 2 years");b.equal(a.from(moment([2007,1,28]).subtract({y:1})),"in a year","1 year = a year");b.equal(a.from(moment([2007,1,28]).subtract({y:5})),"in 5 years","5 years = 5 years");b.done()},"from relative time past":function(b){var a=moment([2007,1,28]);b.equal(a.from(moment([2007,1,28]).add({s:44})),"a few seconds ago","44 seconds = a few seconds");b.equal(a.from(moment([2007,1,28]).add({s:45})),"a minute ago","45 seconds = a minute");b.equal(a.from(moment([2007,1,28]).add({s:89})),"a minute ago","89 seconds = a minute");b.equal(a.from(moment([2007,1,28]).add({s:90})),"2 minutes ago","90 seconds = 2 minutes");b.equal(a.from(moment([2007,1,28]).add({m:44})),"44 minutes ago","44 minutes = 44 minutes");b.equal(a.from(moment([2007,1,28]).add({m:45})),"an hour ago","45 minutes = an hour");b.equal(a.from(moment([2007,1,28]).add({m:89})),"an hour ago","89 minutes = an hour");b.equal(a.from(moment([2007,1,28]).add({m:90})),"2 hours ago","90 minutes = 2 hours");b.equal(a.from(moment([2007,1,28]).add({h:5})),"5 hours ago","5 hours = 5 hours");b.equal(a.from(moment([2007,1,28]).add({h:21})),"21 hours ago","21 hours = 21 hours");b.equal(a.from(moment([2007,1,28]).add({h:22})),"a day ago","22 hours = a day");b.equal(a.from(moment([2007,1,28]).add({h:35})),"a day ago","35 hours = a day");b.equal(a.from(moment([2007,1,28]).add({h:36})),"2 days ago","36 hours = 2 days");b.equal(a.from(moment([2007,1,28]).add({d:1})),"a day ago","1 day = a day");b.equal(a.from(moment([2007,1,28]).add({d:5})),"5 days ago","5 days = 5 days");b.equal(a.from(moment([2007,1,28]).add({d:25})),"25 days ago","25 days = 25 days");b.equal(a.from(moment([2007,1,28]).add({d:26})),"a month ago","26 days = a month");b.equal(a.from(moment([2007,1,28]).add({d:30})),"a month ago","30 days = a month");b.equal(a.from(moment([2007,1,28]).add({d:43})),"a month ago","43 days = a month");b.equal(a.from(moment([2007,1,28]).add({d:46})),"2 months ago","46 days = 2 months");b.equal(a.from(moment([2007,1,28]).add({d:74})),"2 months ago","75 days = 2 months");b.equal(a.from(moment([2007,1,28]).add({d:76})),"3 months ago","76 days = 3 months");b.equal(a.from(moment([2007,1,28]).add({M:1})),"a month ago","1 month = a month");b.equal(a.from(moment([2007,1,28]).add({M:5})),"5 months ago","5 months = 5 months");b.equal(a.from(moment([2007,1,28]).add({d:315})),"10 months ago","315 days = 10 months");b.equal(a.from(moment([2007,1,28]).add({d:344})),"a year ago","344 days = a year");b.equal(a.from(moment([2007,1,28]).add({d:345})),"a year ago","345 days = a year");b.equal(a.from(moment([2007,1,28]).add({d:548})),"2 years ago","548 days = 2 years");b.equal(a.from(moment([2007,1,28]).add({y:1})),"a year ago","1 year = a year");b.equal(a.from(moment([2007,1,28]).add({y:5})),"5 years ago","5 years = 5 years");b.done()},"instance locale used with from":function(e){e.expect(2);moment.locale("en");var d=moment([2012,5,6]).locale("es"),c=moment([2012,5,7]);e.equal(d.from(c),"hace un día","preserve locale of first moment");e.equal(c.from(d),"in a day","do not preserve locale of second moment");e.done()},"instance localeData":function(a){moment.defineLocale("dude",{week:{dow:3}});a.equal(moment().locale("dude").localeData()._week.dow,3);a.done()},"month name callback function":function(b){function a(c,d){if(/test/.test(d)){return"test"}if(c.date()===1){return"date"}return"default"}moment.locale("made-up-2",{months:a,monthsShort:a,weekdays:a,weekdaysShort:a,weekdaysMin:a});b.equal(moment().format("[test] dd ddd dddd MMM MMMM"),"test test test test test test","format month name function should be able to access the format string");b.equal(moment([2011,0,1]).format("dd ddd dddd MMM MMMM"),"date date date date date","format month name function should be able to access the moment object");b.equal(moment([2011,0,2]).format("dd ddd dddd MMM MMMM"),"default default default default default","format month name function should be able to access the moment object");b.done()},"changing parts of a locale config":function(a){a.expect(2);moment.locale("partial-lang",{months:"a b c d e f g h i j k l".split(" ")});a.equal(moment([2011,0,1]).format("MMMM"),"a","should be able to set locale values when creating the localeuage");moment.locale("partial-lang",{monthsShort:"A B C D E F G H I J K L".split(" ")});a.equal(moment([2011,0,1]).format("MMMM MMM"),"a A","should be able to set locale values after creating the localeuage");a.done()},"start/endOf week feature for first-day-is-monday locales":function(a){a.expect(2);moment.locale("monday-lang",{week:{dow:1}});moment.locale("monday-lang");a.equal(moment([2013,0,1]).startOf("week").day(),1,"for locale monday-lang first day of the week should be monday");a.equal(moment([2013,0,1]).endOf("week").day(),0,"for locale monday-lang last day of the week should be sunday");a.done()},"meridiem parsing":function(a){a.expect(2);moment.locale("meridiem-parsing",{meridiemParse:/[bd]/i,isPM:function(b){return b==="b"}});moment.locale("meridiem-parsing");a.equal(moment("2012-01-01 3b","YYYY-MM-DD ha").hour(),15,"Custom parsing of meridiem should work");a.equal(moment("2012-01-01 3d","YYYY-MM-DD ha").hour(),3,"Custom parsing of meridiem should work");a.done()},"invalid date formatting":function(a){moment.locale("has-invalid",{invalidDate:"KHAAAAAAAAAAAN!"});a.equal(moment.invalid().format(),"KHAAAAAAAAAAAN!");a.equal(moment.invalid().format("YYYY-MM-DD"),"KHAAAAAAAAAAAN!");a.done()},"return locale name":function(b){b.expect(1);var a=moment.locale("return-this",{});b.equal(a,"return-this","returns the locale configured");b.done()},"changing the global locale doesn't affect existing instances":function(b){var a=moment();moment.locale("fr");b.equal("en",a.locale());b.done()},"setting a language on instance returns the original moment for chaining":function(b){var a=moment();b.equal(a.lang("fr"),a,"setting the language (lang) returns the original moment for chaining");b.equal(a.locale("it"),a,"setting the language (locale) returns the original moment for chaining");b.done()},"lang(key) changes the language of the instance":function(b){var a=moment().month(0);a.lang("fr");b.equal(a.locale(),"fr","m.lang(key) changes instance locale");b.done()},"moment#locale(false) resets to global locale":function(b){var a=moment();moment.locale("fr");a.locale("it");b.equal(moment.locale(),"fr","global locale is it");b.equal(a.locale(),"it","instance locale is it");a.locale(false);b.equal(a.locale(),"fr","instance locale reset to global locale");b.done()}};