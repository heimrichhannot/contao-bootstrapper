var moment=require("../../moment");exports.zones={setUp:function(b){moment.locale("en");moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};b()},tearDown:function(b){moment.locale("en");b()},"set zone":function(c){var d=moment();d.zone(0);c.equal(d.zone(),0,"should be able to set the zone to 0");d.zone(60);c.equal(d.zone(),60,"should be able to set the zone to 60");d.zone(-60);c.equal(d.zone(),-60,"should be able to set the zone to -60");c.done()},"set zone shorthand":function(c){var d=moment();d.zone(1);c.equal(d.zone(),60,"setting the zone to 1 should imply hours and convert to 60");d.zone(-1);c.equal(d.zone(),-60,"setting the zone to -1 should imply hours and convert to -60");d.zone(15);c.equal(d.zone(),900,"setting the zone to 15 should imply hours and convert to 900");d.zone(-15);c.equal(d.zone(),-900,"setting the zone to -15 should imply hours and convert to -900");d.zone(16);c.equal(d.zone(),16,"setting the zone to 16 should imply minutes");d.zone(-16);c.equal(d.zone(),-16,"setting the zone to -16 should imply minutes");c.done()},"set zone with string":function(c){var d=moment();d.zone("+00:00");c.equal(d.zone(),0,"set the zone with a timezone string");d.zone("2013-03-07T07:00:00-08:00");c.equal(d.zone(),480,"set the zone with a string that does not begin with the timezone");d.zone("2013-03-07T07:00:00+0100");c.equal(d.zone(),-60,"set the zone with a string that uses the +0000 syntax");d.zone("03-07-2013T07:00:00-08:00");c.equal(d.zone(),480,"set the zone with a string with a non-ISO 8601 date");c.done()},"change hours when changing the zone":function(c){var d=moment.utc([2000,0,1,6]);d.zone(0);c.equal(d.hour(),6,"UTC 6AM should be 6AM at +0000");d.zone(60);c.equal(d.hour(),5,"UTC 6AM should be 5AM at -0100");d.zone(-60);c.equal(d.hour(),7,"UTC 6AM should be 7AM at +0100");c.done()},"change minutes when changing the zone":function(c){var d=moment.utc([2000,0,1,6,31]);d.zone(0);c.equal(d.format("HH:mm"),"06:31","UTC 6:31AM should be 6:31AM at +0000");d.zone(30);c.equal(d.format("HH:mm"),"06:01","UTC 6:31AM should be 6:01AM at -0030");d.zone(-30);c.equal(d.format("HH:mm"),"07:01","UTC 6:31AM should be 7:01AM at +0030");d.zone(1380);c.equal(d.format("HH:mm"),"07:31","UTC 6:31AM should be 7:31AM at +1380");c.done()},"distance from the unix epoch":function(i){var j=moment(),k=moment(j),l=moment(j),g=moment(j),h=moment(j);k.utc();i.equal(+j,+k,"moment should equal moment.utc");l.zone(-60);i.equal(+j,+l,"moment should equal moment.zone(-60)");g.zone(480);i.equal(+j,+g,"moment should equal moment.zone(480)");h.zone(1000);i.equal(+j,+h,"moment should equal moment.zone(1000)");i.done()},"update offset after changing any values":function(f){var d=moment.updateOffset,e=moment.utc([2000,6,1]);moment.updateOffset=function(b,a){if(b.__doChange){if(+b>962409600000){b.zone(120,a)}else{b.zone(60,a)}}};f.equal(e.format("ZZ"),"+0000","should be at +0000");f.equal(e.format("HH:mm"),"00:00","should start 12AM at +0000 timezone");e.__doChange=true;e.add(1,"h");f.equal(e.format("ZZ"),"-0200","should be at -0200");f.equal(e.format("HH:mm"),"23:00","1AM at +0000 should be 11PM at -0200 timezone");e.subtract(1,"h");f.equal(e.format("ZZ"),"-0100","should be at -0100");f.equal(e.format("HH:mm"),"23:00","12AM at +0000 should be 11PM at -0100 timezone");moment.updateOffset=d;f.done()},"getters and setters":function(d){var a=moment([2011,5,20]);d.equal(a.clone().zone(120).year(2012).year(),2012,"should get and set year correctly");d.equal(a.clone().zone(120).month(1).month(),1,"should get and set month correctly");d.equal(a.clone().zone(120).date(2).date(),2,"should get and set date correctly");d.equal(a.clone().zone(120).day(1).day(),1,"should get and set day correctly");d.equal(a.clone().zone(120).hour(1).hour(),1,"should get and set hour correctly");d.equal(a.clone().zone(120).minute(1).minute(),1,"should get and set minute correctly");d.done()},getters:function(d){var a=moment.utc([2012,0,1,0,0,0]);d.equal(a.clone().zone(120).year(),2011,"should get year correctly");d.equal(a.clone().zone(120).month(),11,"should get month correctly");d.equal(a.clone().zone(120).date(),31,"should get date correctly");d.equal(a.clone().zone(120).hour(),22,"should get hour correctly");d.equal(a.clone().zone(120).minute(),0,"should get minute correctly");d.equal(a.clone().zone(-120).year(),2012,"should get year correctly");d.equal(a.clone().zone(-120).month(),0,"should get month correctly");d.equal(a.clone().zone(-120).date(),1,"should get date correctly");d.equal(a.clone().zone(-120).hour(),2,"should get hour correctly");d.equal(a.clone().zone(-120).minute(),0,"should get minute correctly");d.equal(a.clone().zone(-90).year(),2012,"should get year correctly");d.equal(a.clone().zone(-90).month(),0,"should get month correctly");d.equal(a.clone().zone(-90).date(),1,"should get date correctly");d.equal(a.clone().zone(-90).hour(),1,"should get hour correctly");d.equal(a.clone().zone(-90).minute(),30,"should get minute correctly");d.done()},from:function(i){var j=moment(),k=moment(j).zone(720),l=moment(j).zone(360),g=moment(j).zone(-690),h=moment(j).add(35,"m");i.equal(j.from(h),k.from(h),"moment#from should be the same in all zones");i.equal(j.from(h),l.from(h),"moment#from should be the same in all zones");i.equal(j.from(h),g.from(h),"moment#from should be the same in all zones");i.done()},diff:function(i){var j=moment(),k=moment(j).zone(720),l=moment(j).zone(360),g=moment(j).zone(-690),h=moment(j).add(35,"m");i.equal(j.diff(h),k.diff(h),"moment#diff should be the same in all zones");i.equal(j.diff(h),l.diff(h),"moment#diff should be the same in all zones");i.equal(j.diff(h),g.diff(h),"moment#diff should be the same in all zones");i.equal(j.diff(h,"minute",true),k.diff(h,"minute",true),"moment#diff should be the same in all zones");i.equal(j.diff(h,"minute",true),l.diff(h,"minute",true),"moment#diff should be the same in all zones");i.equal(j.diff(h,"minute",true),g.diff(h,"minute",true),"moment#diff should be the same in all zones");i.equal(j.diff(h,"hour",true),k.diff(h,"hour",true),"moment#diff should be the same in all zones");i.equal(j.diff(h,"hour",true),l.diff(h,"hour",true),"moment#diff should be the same in all zones");i.equal(j.diff(h,"hour",true),g.diff(h,"hour",true),"moment#diff should be the same in all zones");i.done()},"unix offset and timestamp":function(h){var i=moment(),j=moment(i).zone(720),f=moment(i).zone(360),g=moment(i).zone(-690);h.equal(i.unix(),j.unix(),"moment#unix should be the same in all zones");h.equal(i.unix(),f.unix(),"moment#unix should be the same in all zones");h.equal(i.unix(),g.unix(),"moment#unix should be the same in all zones");h.equal(+i,+j,"moment#valueOf should be the same in all zones");h.equal(+i,+f,"moment#valueOf should be the same in all zones");h.equal(+i,+g,"moment#valueOf should be the same in all zones");h.done()},cloning:function(b){b.equal(moment().zone(120).clone().zone(),120,"explicit cloning should retain the zone");b.equal(moment().zone(-120).clone().zone(),-120,"explicit cloning should retain the zone");b.equal(moment(moment().zone(120)).zone(),120,"implicit cloning should retain the zone");b.equal(moment(moment().zone(-120)).zone(),-120,"implicit cloning should retain the zone");b.done()},"start of / end of":function(d){var a=moment.utc([2010,1,2,0,0,0]).zone(450);d.equal(a.clone().startOf("day").hour(),0,"start of day should work on moments with a zone");d.equal(a.clone().startOf("day").minute(),0,"start of day should work on moments with a zone");d.equal(a.clone().startOf("hour").minute(),0,"start of hour should work on moments with a zone");d.equal(a.clone().endOf("day").hour(),23,"end of day should work on moments with a zone");d.equal(a.clone().endOf("day").minute(),59,"end of day should work on moments with a zone");d.equal(a.clone().endOf("hour").minute(),59,"end of hour should work on moments with a zone");d.done()},"reset zone with moment#utc":function(d){var a=moment.utc([2012]).zone(480);d.equal(a.clone().hour(),16,"different zone should have different hour");d.equal(a.clone().utc().hour(),0,"calling moment#utc should reset the offset");d.done()},"reset zone with moment#local":function(d){var a=moment([2012]).zone(480);d.equal(a.clone().local().hour(),0,"calling moment#local should reset the offset");d.done()},toDate:function(h){var i=new Date(),j=moment(i).zone(720).toDate(),f=moment(i).zone(360).toDate(),g=moment(i).zone(-690).toDate();h.equal(+i,+j,"moment#toDate should output a date with the right unix timestamp");h.equal(+i,+f,"moment#toDate should output a date with the right unix timestamp");h.equal(+i,+g,"moment#toDate should output a date with the right unix timestamp");h.done()},"same / before / after":function(g){var h=moment().utc(),e=moment(h).zone(120),f=moment(h).zone(-120);g.ok(h.isSame(e),"two moments with different offsets should be the same");g.ok(h.isSame(f),"two moments with different offsets should be the same");g.ok(h.isSame(e,"hour"),"two moments with different offsets should be the same hour");g.ok(h.isSame(f,"hour"),"two moments with different offsets should be the same hour");h.add(1,"hour");g.ok(h.isAfter(e),"isAfter should work with two moments with different offsets");g.ok(h.isAfter(f),"isAfter should work with two moments with different offsets");g.ok(h.isAfter(e,"hour"),"isAfter:hour should work with two moments with different offsets");g.ok(h.isAfter(f,"hour"),"isAfter:hour should work with two moments with different offsets");h.subtract(2,"hour");g.ok(h.isBefore(e),"isBefore should work with two moments with different offsets");g.ok(h.isBefore(f),"isBefore should work with two moments with different offsets");g.ok(h.isBefore(e,"hour"),"isBefore:hour should work with two moments with different offsets");g.ok(h.isBefore(f,"hour"),"isBefore:hour should work with two moments with different offsets");g.done()},"add / subtract over dst":function(f){var d=moment.updateOffset,e=moment.utc([2000,2,31,3]);moment.updateOffset=function(b,a){if(b.clone().utc().month()>2){b.zone(-60,a)}else{b.zone(0,a)}};f.equal(e.hour(),3,"should start at 00:00");e.add(24,"hour");f.equal(e.hour(),4,"adding 24 hours should disregard dst");e.subtract(24,"hour");f.equal(e.hour(),3,"subtracting 24 hours should disregard dst");e.add(1,"day");f.equal(e.hour(),3,"adding 1 day should have the same hour");e.subtract(1,"day");f.equal(e.hour(),3,"subtracting 1 day should have the same hour");e.add(1,"month");f.equal(e.hour(),3,"adding 1 month should have the same hour");e.subtract(1,"month");f.equal(e.hour(),3,"subtracting 1 month should have the same hour");moment.updateOffset=d;f.done()},isDST:function(c){var d=moment.updateOffset;moment.updateOffset=function(b,a){if(b.month()>2&&b.month()<9){b.zone(-60,a)}else{b.zone(0,a)}};c.ok(!moment().month(0).isDST(),"Jan should not be summer dst");c.ok(moment().month(6).isDST(),"Jul should be summer dst");c.ok(!moment().month(11).isDST(),"Dec should not be summer dst");moment.updateOffset=function(a){if(a.month()>2&&a.month()<9){a.zone(0)}else{a.zone(-60)}};c.ok(moment().month(0).isDST(),"Jan should be winter dst");c.ok(!moment().month(6).isDST(),"Jul should not be winter dst");c.ok(moment().month(11).isDST(),"Dec should be winter dst");moment.updateOffset=d;c.done()},"zone names":function(b){b.expect(8);b.equal(moment().zoneAbbr(),"","Local zone abbr should be empty");b.equal(moment().format("z"),"","Local zone formatted abbr should be empty");b.equal(moment().zoneName(),"","Local zone name should be empty");b.equal(moment().format("zz"),"","Local zone formatted name should be empty");b.equal(moment.utc().zoneAbbr(),"UTC","UTC zone abbr should be UTC");b.equal(moment.utc().format("z"),"UTC","UTC zone formatted abbr should be UTC");b.equal(moment.utc().zoneName(),"Coordinated Universal Time","UTC zone abbr should be Coordinated Universal Time");b.equal(moment.utc().format("zz"),"Coordinated Universal Time","UTC zone formatted abbr should be Coordinated Universal Time");b.done()},"hours alignment with UTC":function(b){b.expect(4);b.equals(moment().zone(120).hasAlignedHourOffset(),true);b.equals(moment().zone(-180).hasAlignedHourOffset(),true);b.equals(moment().zone(90).hasAlignedHourOffset(),false);b.equals(moment().zone(-90).hasAlignedHourOffset(),false);b.done()},"hours alignment with other zone":function(c){c.expect(16);var d=moment().zone(120);c.equals(d.hasAlignedHourOffset(moment().zone(180)),true);c.equals(d.hasAlignedHourOffset(moment().zone(-180)),true);c.equals(d.hasAlignedHourOffset(moment().zone(90)),false);c.equals(d.hasAlignedHourOffset(moment().zone(-90)),false);d=moment().zone(90);c.equals(d.hasAlignedHourOffset(moment().zone(180)),false);c.equals(d.hasAlignedHourOffset(moment().zone(-180)),false);c.equals(d.hasAlignedHourOffset(moment().zone(30)),true);c.equals(d.hasAlignedHourOffset(moment().zone(-30)),true);d=moment().zone(-60);c.equals(d.hasAlignedHourOffset(moment().zone(180)),true);c.equals(d.hasAlignedHourOffset(moment().zone(-180)),true);c.equals(d.hasAlignedHourOffset(moment().zone(90)),false);c.equals(d.hasAlignedHourOffset(moment().zone(-90)),false);d=moment().zone(25);c.equals(d.hasAlignedHourOffset(moment().zone(-35)),true);c.equals(d.hasAlignedHourOffset(moment().zone(85)),true);c.equals(d.hasAlignedHourOffset(moment().zone(35)),false);c.equals(d.hasAlignedHourOffset(moment().zone(-85)),false);c.done()},"parse zone":function(c){c.expect(2);var d=moment("2013-01-01T00:00:00-13:00").parseZone();c.equal(d.zone(),13*60);c.equal(d.hours(),0);c.done()},"parse zone static":function(c){c.expect(2);var d=moment.parseZone("2013-01-01T00:00:00-13:00");c.equal(d.zone(),13*60);c.equal(d.hours(),0);c.done()},"parse zone with more arguments":function(c){var d;c.expect(3);d=moment.parseZone("2013 01 01 05 -13:00","YYYY MM DD HH ZZ");c.equal(d.format(),"2013-01-01T05:00:00-13:00","accept input and format");d=moment.parseZone("2013-01-01-13:00","YYYY MM DD ZZ",true);c.equal(d.isValid(),false,"accept input, format and strict flag");d=moment.parseZone("2013-01-01-13:00",["DD MM YYYY ZZ","YYYY MM DD ZZ"]);c.equal(d.format(),"2013-01-01T00:00:00-13:00","accept input and array of formats");c.done()},"parse zone with a timezone from the format string":function(c){c.expect(1);var d=moment("11-12-2013 -0400 +1100","DD-MM-YYYY ZZ #####").parseZone();c.equal(d.zone(),4*60);c.done()},"parse zone without a timezone included in the format string":function(c){c.expect(1);var d=moment("11-12-2013 -0400 +1100","DD-MM-YYYY").parseZone();c.equal(d.zone(),-11*60);c.done()},"timezone format":function(b){b.equal(moment().zone(-60).format("ZZ"),"+0100","-60 -> +0100");b.equal(moment().zone(-90).format("ZZ"),"+0130","-90 -> +0130");b.equal(moment().zone(-120).format("ZZ"),"+0200","-120 -> +0200");b.equal(moment().zone(+60).format("ZZ"),"-0100","+60 -> -0100");b.equal(moment().zone(+90).format("ZZ"),"-0130","+90 -> -0130");b.equal(moment().zone(+120).format("ZZ"),"-0200","+120 -> -0200");b.done()}};