var moment=require("../../moment");exports.locale={setUp:function(b){moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};moment.locale("en");b()},"library getters and setters":function(c){var d=moment.locale("en");c.equal(d,"en","locale should return en by default");c.equal(moment.locale(),"en","locale should return en by default");moment.locale("fr");c.equal(moment.locale(),"fr","locale should return the changed locale");moment.locale("en-gb");c.equal(moment.locale(),"en-gb","locale should return the changed locale");moment.locale("en");c.equal(moment.locale(),"en","locale should reset");moment.locale("does-not-exist");c.equal(moment.locale(),"en","locale should reset");moment.locale("EN");c.equal(moment.locale(),"en","Normalize locale key case");moment.locale("EN_gb");c.equal(moment.locale(),"en-gb","Normalize locale key underscore");c.done()},"library setter array of locales":function(b){b.equal(moment.locale(["non-existent","fr","also-non-existent"]),"fr","passing an array uses the first valid locale");b.equal(moment.locale(["es","fr","also-non-existent"]),"es","passing an array uses the first valid locale");b.done()},"library setter locale substrings":function(b){b.equal(moment.locale("fr-crap"),"fr","use substrings");b.equal(moment.locale("fr-does-not-exist"),"fr","uses deep substrings");b.equal(moment.locale("fr-CA-does-not-exist"),"fr-ca","uses deepest substring");b.done()},"library getter locale array and substrings":function(b){b.equals(moment.locale(["en-CH","fr"]),"en","prefer root locale to shallower ones");b.equals(moment.locale(["en-gb-leeds","en-CA"]),"en-gb","prefer root locale to shallower ones");b.equals(moment.locale(["en-fake","en-CA"]),"en-ca","prefer alternatives with shared roots");b.equals(moment.locale(["en-fake","en-fake2","en-ca"]),"en-ca","prefer alternatives with shared roots");b.equals(moment.locale(["fake-CA","fake-MX","fr"]),"fr","always find something if possible");b.equals(moment.locale(["fake-CA","fake-MX","fr"]),"fr","always find something if possible");b.equals(moment.locale(["fake-CA","fake-MX","fr-fake-fake-fake"]),"fr","always find something if possible");b.equals(moment.locale(["en","en-CA"]),"en","prefer earlier if it works");b.done()},"library ensure inheritance":function(b){moment.locale("made-up",{months:"February_March_April_May_June_July_August_September_October_November_December_January".split("_")});b.equal(moment([2012,5,6]).format("MMMM"),"July","Override some of the configs");b.equal(moment([2012,5,6]).format("MMM"),"Jun","But not all of them");b.done()},"library ensure inheritance LT L LL LLL LLLL":function(c){var d="test-inherit-lt";moment.defineLocale(d,{longDateFormat:{LT:"-[LT]-",L:"-[L]-",LL:"-[LL]-",LLL:"-[LLL]-",LLLL:"-[LLLL]-"},calendar:{sameDay:"[sameDay] LT",nextDay:"[nextDay] L",nextWeek:"[nextWeek] LL",lastDay:"[lastDay] LLL",lastWeek:"[lastWeek] LLLL",sameElse:"L"}});moment.locale("es");c.equal(moment().locale(d).calendar(),"sameDay -LT-","Should use instance locale in LT formatting");c.equal(moment().add(1,"days").locale(d).calendar(),"nextDay -L-","Should use instance locale in L formatting");c.equal(moment().add(-1,"days").locale(d).calendar(),"lastDay -LLL-","Should use instance locale in LL formatting");c.equal(moment().add(4,"days").locale(d).calendar(),"nextWeek -LL-","Should use instance locale in LLL formatting");c.equal(moment().add(-4,"days").locale(d).calendar(),"lastWeek -LLLL-","Should use instance locale in LLLL formatting");c.done()},"library localeData":function(c){c.expect(3);moment.locale("en");var d=moment([2000,0]);c.equal(moment.localeData().months(d),"January","no arguments returns global");c.equal(moment.localeData("zh-cn").months(d),"一月","a string returns the locale based on key");c.equal(moment.localeData(moment().locale("es")).months(d),"enero","if you pass in a moment it uses the moment's locale");c.done()},"library deprecations":function(b){moment.lang("dude",{months:["Movember"]});b.equal(moment.locale(),"dude","setting the lang sets the locale");b.equal(moment.lang(),moment.locale());b.equal(moment.langData(),moment.localeData(),"langData is localeData");b.done()},defineLocale:function(b){moment.locale("en");moment.defineLocale("dude",{months:["Movember"]});b.equal(moment().locale(),"dude","defineLocale also sets it");b.equal(moment().locale("dude").locale(),"dude","defineLocale defines a locale");b.done()},"library convenience":function(b){moment.locale("something",{week:{dow:3}});moment.locale("something");b.equal(moment.locale(),"something","locale can be used to create the locale too");b.done()},"instance locale method":function(b){moment.locale("en");b.equal(moment([2012,5,6]).format("MMMM"),"June","Normally default to global");b.equal(moment([2012,5,6]).locale("es").format("MMMM"),"junio","Use the instance specific locale");b.equal(moment([2012,5,6]).format("MMMM"),"June","Using an instance specific locale does not affect other moments");b.done()},"instance locale method with array":function(c){var d=moment().locale(["non-existent","fr","also-non-existent"]);c.equal(d.locale(),"fr","passing an array uses the first valid locale");d=moment().locale(["es","fr","also-non-existent"]);c.equal(d.locale(),"es","passing an array uses the first valid locale");c.done()},"instance getter locale substrings":function(c){var d=moment();d.locale("fr-crap");c.equal(d.locale(),"fr","use substrings");d.locale("fr-does-not-exist");c.equal(d.locale(),"fr","uses deep substrings");c.done()},"instance locale persists with manipulation":function(b){b.expect(3);moment.locale("en");b.equal(moment([2012,5,6]).locale("es").add({days:1}).format("MMMM"),"junio","With addition");b.equal(moment([2012,5,6]).locale("es").day(0).format("MMMM"),"junio","With day getter");b.equal(moment([2012,5,6]).locale("es").endOf("day").format("MMMM"),"junio","With endOf");b.done()},"instance locale persists with cloning":function(a){a.expect(2);moment.locale("en");var c=moment([2012,5,6]).locale("es"),h=c.clone(),b=moment(c);a.equal(h.format("MMMM"),"junio","using moment.fn.clone()");a.equal(h.format("MMMM"),"junio","using moment()");a.done()},"duration locale method":function(b){b.expect(3);moment.locale("en");b.equal(moment.duration({seconds:44}).humanize(),"a few seconds","Normally default to global");b.equal(moment.duration({seconds:44}).locale("es").humanize(),"unos segundos","Use the instance specific locale");b.equal(moment.duration({seconds:44}).humanize(),"a few seconds","Using an instance specific locale does not affect other durations");b.done()},"duration locale persists with cloning":function(a){a.expect(1);moment.locale("en");var b=moment.duration({seconds:44}).locale("es"),f=moment.duration(b);a.equal(f.humanize(),"unos segundos","using moment.duration()");a.done()},"changing the global locale doesn't affect existing duration instances":function(c){var d=moment.duration();moment.locale("fr");c.equal("en",d.locale());c.done()},"duration deprecations":function(b){b.equal(moment.duration().lang(),moment.duration().localeData(),"duration.lang is the same as duration.localeData");b.done()},"from relative time future":function(c){var d=moment([2007,1,28]);c.equal(d.from(moment([2007,1,28]).subtract({s:44})),"in a few seconds","44 seconds = a few seconds");c.equal(d.from(moment([2007,1,28]).subtract({s:45})),"in a minute","45 seconds = a minute");c.equal(d.from(moment([2007,1,28]).subtract({s:89})),"in a minute","89 seconds = a minute");c.equal(d.from(moment([2007,1,28]).subtract({s:90})),"in 2 minutes","90 seconds = 2 minutes");c.equal(d.from(moment([2007,1,28]).subtract({m:44})),"in 44 minutes","44 minutes = 44 minutes");c.equal(d.from(moment([2007,1,28]).subtract({m:45})),"in an hour","45 minutes = an hour");c.equal(d.from(moment([2007,1,28]).subtract({m:89})),"in an hour","89 minutes = an hour");c.equal(d.from(moment([2007,1,28]).subtract({m:90})),"in 2 hours","90 minutes = 2 hours");c.equal(d.from(moment([2007,1,28]).subtract({h:5})),"in 5 hours","5 hours = 5 hours");c.equal(d.from(moment([2007,1,28]).subtract({h:21})),"in 21 hours","21 hours = 21 hours");c.equal(d.from(moment([2007,1,28]).subtract({h:22})),"in a day","22 hours = a day");c.equal(d.from(moment([2007,1,28]).subtract({h:35})),"in a day","35 hours = a day");c.equal(d.from(moment([2007,1,28]).subtract({h:36})),"in 2 days","36 hours = 2 days");c.equal(d.from(moment([2007,1,28]).subtract({d:1})),"in a day","1 day = a day");c.equal(d.from(moment([2007,1,28]).subtract({d:5})),"in 5 days","5 days = 5 days");c.equal(d.from(moment([2007,1,28]).subtract({d:25})),"in 25 days","25 days = 25 days");c.equal(d.from(moment([2007,1,28]).subtract({d:26})),"in a month","26 days = a month");c.equal(d.from(moment([2007,1,28]).subtract({d:30})),"in a month","30 days = a month");c.equal(d.from(moment([2007,1,28]).subtract({d:45})),"in a month","45 days = a month");c.equal(d.from(moment([2007,1,28]).subtract({d:47})),"in 2 months","47 days = 2 months");c.equal(d.from(moment([2007,1,28]).subtract({d:74})),"in 2 months","74 days = 2 months");c.equal(d.from(moment([2007,1,28]).subtract({d:78})),"in 3 months","78 days = 3 months");c.equal(d.from(moment([2007,1,28]).subtract({M:1})),"in a month","1 month = a month");c.equal(d.from(moment([2007,1,28]).subtract({M:5})),"in 5 months","5 months = 5 months");c.equal(d.from(moment([2007,1,28]).subtract({d:315})),"in 10 months","315 days = 10 months");c.equal(d.from(moment([2007,1,28]).subtract({d:344})),"in a year","344 days = a year");c.equal(d.from(moment([2007,1,28]).subtract({d:345})),"in a year","345 days = a year");c.equal(d.from(moment([2007,1,28]).subtract({d:548})),"in 2 years","548 days = in 2 years");c.equal(d.from(moment([2007,1,28]).subtract({y:1})),"in a year","1 year = a year");c.equal(d.from(moment([2007,1,28]).subtract({y:5})),"in 5 years","5 years = 5 years");c.done()},"from relative time past":function(c){var d=moment([2007,1,28]);c.equal(d.from(moment([2007,1,28]).add({s:44})),"a few seconds ago","44 seconds = a few seconds");c.equal(d.from(moment([2007,1,28]).add({s:45})),"a minute ago","45 seconds = a minute");c.equal(d.from(moment([2007,1,28]).add({s:89})),"a minute ago","89 seconds = a minute");c.equal(d.from(moment([2007,1,28]).add({s:90})),"2 minutes ago","90 seconds = 2 minutes");c.equal(d.from(moment([2007,1,28]).add({m:44})),"44 minutes ago","44 minutes = 44 minutes");c.equal(d.from(moment([2007,1,28]).add({m:45})),"an hour ago","45 minutes = an hour");c.equal(d.from(moment([2007,1,28]).add({m:89})),"an hour ago","89 minutes = an hour");c.equal(d.from(moment([2007,1,28]).add({m:90})),"2 hours ago","90 minutes = 2 hours");c.equal(d.from(moment([2007,1,28]).add({h:5})),"5 hours ago","5 hours = 5 hours");c.equal(d.from(moment([2007,1,28]).add({h:21})),"21 hours ago","21 hours = 21 hours");c.equal(d.from(moment([2007,1,28]).add({h:22})),"a day ago","22 hours = a day");c.equal(d.from(moment([2007,1,28]).add({h:35})),"a day ago","35 hours = a day");c.equal(d.from(moment([2007,1,28]).add({h:36})),"2 days ago","36 hours = 2 days");c.equal(d.from(moment([2007,1,28]).add({d:1})),"a day ago","1 day = a day");c.equal(d.from(moment([2007,1,28]).add({d:5})),"5 days ago","5 days = 5 days");c.equal(d.from(moment([2007,1,28]).add({d:25})),"25 days ago","25 days = 25 days");c.equal(d.from(moment([2007,1,28]).add({d:26})),"a month ago","26 days = a month");c.equal(d.from(moment([2007,1,28]).add({d:30})),"a month ago","30 days = a month");c.equal(d.from(moment([2007,1,28]).add({d:43})),"a month ago","43 days = a month");c.equal(d.from(moment([2007,1,28]).add({d:46})),"2 months ago","46 days = 2 months");c.equal(d.from(moment([2007,1,28]).add({d:74})),"2 months ago","75 days = 2 months");c.equal(d.from(moment([2007,1,28]).add({d:76})),"3 months ago","76 days = 3 months");c.equal(d.from(moment([2007,1,28]).add({M:1})),"a month ago","1 month = a month");c.equal(d.from(moment([2007,1,28]).add({M:5})),"5 months ago","5 months = 5 months");c.equal(d.from(moment([2007,1,28]).add({d:315})),"10 months ago","315 days = 10 months");c.equal(d.from(moment([2007,1,28]).add({d:344})),"a year ago","344 days = a year");c.equal(d.from(moment([2007,1,28]).add({d:345})),"a year ago","345 days = a year");c.equal(d.from(moment([2007,1,28]).add({d:548})),"2 years ago","548 days = 2 years");c.equal(d.from(moment([2007,1,28]).add({y:1})),"a year ago","1 year = a year");c.equal(d.from(moment([2007,1,28]).add({y:5})),"5 years ago","5 years = 5 years");c.done()},"instance locale used with from":function(a){a.expect(2);moment.locale("en");var b=moment([2012,5,6]).locale("es"),f=moment([2012,5,7]);a.equal(b.from(f),"hace un día","preserve locale of first moment");a.equal(f.from(b),"in a day","do not preserve locale of second moment");a.done()},"instance localeData":function(b){moment.defineLocale("dude",{week:{dow:3}});b.equal(moment().locale("dude").localeData()._week.dow,3);b.done()},"month name callback function":function(c){function d(b,a){if(/test/.test(a)){return"test"}if(b.date()===1){return"date"}return"default"}moment.locale("made-up-2",{months:d,monthsShort:d,weekdays:d,weekdaysShort:d,weekdaysMin:d});c.equal(moment().format("[test] dd ddd dddd MMM MMMM"),"test test test test test test","format month name function should be able to access the format string");c.equal(moment([2011,0,1]).format("dd ddd dddd MMM MMMM"),"date date date date date","format month name function should be able to access the moment object");c.equal(moment([2011,0,2]).format("dd ddd dddd MMM MMMM"),"default default default default default","format month name function should be able to access the moment object");c.done()},"changing parts of a locale config":function(b){b.expect(2);moment.locale("partial-lang",{months:"a b c d e f g h i j k l".split(" ")});b.equal(moment([2011,0,1]).format("MMMM"),"a","should be able to set locale values when creating the localeuage");moment.locale("partial-lang",{monthsShort:"A B C D E F G H I J K L".split(" ")});b.equal(moment([2011,0,1]).format("MMMM MMM"),"a A","should be able to set locale values after creating the localeuage");b.done()},"start/endOf week feature for first-day-is-monday locales":function(b){b.expect(2);moment.locale("monday-lang",{week:{dow:1}});moment.locale("monday-lang");b.equal(moment([2013,0,1]).startOf("week").day(),1,"for locale monday-lang first day of the week should be monday");b.equal(moment([2013,0,1]).endOf("week").day(),0,"for locale monday-lang last day of the week should be sunday");b.done()},"meridiem parsing":function(b){b.expect(2);moment.locale("meridiem-parsing",{meridiemParse:/[bd]/i,isPM:function(a){return a==="b"}});moment.locale("meridiem-parsing");b.equal(moment("2012-01-01 3b","YYYY-MM-DD ha").hour(),15,"Custom parsing of meridiem should work");b.equal(moment("2012-01-01 3d","YYYY-MM-DD ha").hour(),3,"Custom parsing of meridiem should work");b.done()},"invalid date formatting":function(b){moment.locale("has-invalid",{invalidDate:"KHAAAAAAAAAAAN!"});b.equal(moment.invalid().format(),"KHAAAAAAAAAAAN!");b.equal(moment.invalid().format("YYYY-MM-DD"),"KHAAAAAAAAAAAN!");b.done()},"return locale name":function(c){c.expect(1);var d=moment.locale("return-this",{});c.equal(d,"return-this","returns the locale configured");c.done()},"changing the global locale doesn't affect existing instances":function(c){var d=moment();moment.locale("fr");c.equal("en",d.locale());c.done()},"setting a language on instance returns the original moment for chaining":function(c){var d=moment();c.equal(d.lang("fr"),d,"setting the language (lang) returns the original moment for chaining");c.equal(d.locale("it"),d,"setting the language (locale) returns the original moment for chaining");c.done()},"lang(key) changes the language of the instance":function(c){var d=moment().month(0);d.lang("fr");c.equal(d.locale(),"fr","m.lang(key) changes instance locale");c.done()},"moment#locale(false) resets to global locale":function(c){var d=moment();moment.locale("fr");d.locale("it");c.equal(moment.locale(),"fr","global locale is it");c.equal(d.locale(),"it","instance locale is it");d.locale(false);c.equal(d.locale(),"fr","instance locale reset to global locale");c.done()}};