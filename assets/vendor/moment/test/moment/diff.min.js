var moment=require("../../moment");function equal(f,d,c,e){f.ok(Math.abs(d-c)<1e-8,"("+d+" === "+c+") "+e)}function dstForYear(b){var e=moment([b]),a=moment([b+1]),d=e.clone(),c;while(d<a){c=d.clone();d.add(24,"hour");if(c.zone()!==d.zone()){a=d.clone();d=c.clone();break}}while(d<a){c=d.clone();d.add(1,"hour");if(c.zone()!==d.zone()){return{moment:c,diff:(d.zone()-c.zone())/60}}}}exports.diff={setUp:function(a){moment.createFromInputFallback=function(){throw new Error("input not handled by moment")};a()},diff:function(c){c.expect(5);c.equal(moment(1000).diff(0),1000,"1 second - 0 = 1000");c.equal(moment(1000).diff(500),500,"1 second - 0.5 seconds = 500");c.equal(moment(0).diff(1000),-1000,"0 - 1 second = -1000");c.equal(moment(new Date(1000)).diff(1000),0,"1 second - 1 second = 0");var b=new Date(),a=new Date(+b);b.setHours(b.getHours()+1);c.equal(moment(b).diff(a),60*60*1000,"1 hour from now = 3600000");c.done()},"diff key after":function(a){a.expect(10);a.equal(moment([2010]).diff([2011],"years"),-1,"year diff");a.equal(moment([2010]).diff([2010,2],"months"),-2,"month diff");a.equal(moment([2010]).diff([2010,0,7],"weeks"),0,"week diff");a.equal(moment([2010]).diff([2010,0,8],"weeks"),-1,"week diff");a.equal(moment([2010]).diff([2010,0,21],"weeks"),-2,"week diff");a.equal(moment([2010]).diff([2010,0,22],"weeks"),-3,"week diff");a.equal(moment([2010]).diff([2010,0,4],"days"),-3,"day diff");a.equal(moment([2010]).diff([2010,0,1,4],"hours"),-4,"hour diff");a.equal(moment([2010]).diff([2010,0,1,0,5],"minutes"),-5,"minute diff");a.equal(moment([2010]).diff([2010,0,1,0,0,6],"seconds"),-6,"second diff");a.done()},"diff key before":function(a){a.expect(10);a.equal(moment([2011]).diff([2010],"years"),1,"year diff");a.equal(moment([2010,2]).diff([2010],"months"),2,"month diff");a.equal(moment([2010,0,4]).diff([2010],"days"),3,"day diff");a.equal(moment([2010,0,7]).diff([2010],"weeks"),0,"week diff");a.equal(moment([2010,0,8]).diff([2010],"weeks"),1,"week diff");a.equal(moment([2010,0,21]).diff([2010],"weeks"),2,"week diff");a.equal(moment([2010,0,22]).diff([2010],"weeks"),3,"week diff");a.equal(moment([2010,0,1,4]).diff([2010],"hours"),4,"hour diff");a.equal(moment([2010,0,1,0,5]).diff([2010],"minutes"),5,"minute diff");a.equal(moment([2010,0,1,0,0,6]).diff([2010],"seconds"),6,"second diff");a.done()},"diff key before singular":function(a){a.expect(10);a.equal(moment([2011]).diff([2010],"year"),1,"year diff singular");a.equal(moment([2010,2]).diff([2010],"month"),2,"month diff singular");a.equal(moment([2010,0,4]).diff([2010],"day"),3,"day diff singular");a.equal(moment([2010,0,7]).diff([2010],"week"),0,"week diff singular");a.equal(moment([2010,0,8]).diff([2010],"week"),1,"week diff singular");a.equal(moment([2010,0,21]).diff([2010],"week"),2,"week diff singular");a.equal(moment([2010,0,22]).diff([2010],"week"),3,"week diff singular");a.equal(moment([2010,0,1,4]).diff([2010],"hour"),4,"hour diff singular");a.equal(moment([2010,0,1,0,5]).diff([2010],"minute"),5,"minute diff singular");a.equal(moment([2010,0,1,0,0,6]).diff([2010],"second"),6,"second diff singular");a.done()},"diff key before abbreviated":function(a){a.expect(10);a.equal(moment([2011]).diff([2010],"y"),1,"year diff abbreviated");a.equal(moment([2010,2]).diff([2010],"M"),2,"month diff abbreviated");a.equal(moment([2010,0,4]).diff([2010],"d"),3,"day diff abbreviated");a.equal(moment([2010,0,7]).diff([2010],"w"),0,"week diff abbreviated");a.equal(moment([2010,0,8]).diff([2010],"w"),1,"week diff abbreviated");a.equal(moment([2010,0,21]).diff([2010],"w"),2,"week diff abbreviated");a.equal(moment([2010,0,22]).diff([2010],"w"),3,"week diff abbreviated");a.equal(moment([2010,0,1,4]).diff([2010],"h"),4,"hour diff abbreviated");a.equal(moment([2010,0,1,0,5]).diff([2010],"m"),5,"minute diff abbreviated");a.equal(moment([2010,0,1,0,0,6]).diff([2010],"s"),6,"second diff abbreviated");a.done()},"diff month":function(a){a.expect(1);a.equal(moment([2011,0,31]).diff([2011,2,1],"months"),-1,"month diff");a.done()},"diff across DST":function(g){var f=dstForYear(2012),d,c,e;if(!f){g.done();return}g.expect(16);d=f.moment;c=d.clone().utc().add(12,"hours").local();e=(d.daysInMonth()+c.daysInMonth())/2;equal(g,c.diff(d,"ms",true),12*60*60*1000,"ms diff across DST");equal(g,c.diff(d,"s",true),12*60*60,"second diff across DST");equal(g,c.diff(d,"m",true),12*60,"minute diff across DST");equal(g,c.diff(d,"h",true),12,"hour diff across DST");equal(g,c.diff(d,"d",true),(12-f.diff)/24,"day diff across DST");equal(g,c.diff(d,"w",true),(12-f.diff)/24/7,"week diff across DST");equal(g,c.diff(d,"M",true),(12-f.diff)/24/e,"month diff across DST");equal(g,c.diff(d,"y",true),(12-f.diff)/24/e/12,"year diff across DST");d=f.moment;c=d.clone().utc().add(12+f.diff,"hours").local();e=(d.daysInMonth()+c.daysInMonth())/2;equal(g,c.diff(d,"ms",true),(12+f.diff)*60*60*1000,"ms diff across DST");equal(g,c.diff(d,"s",true),(12+f.diff)*60*60,"second diff across DST");equal(g,c.diff(d,"m",true),(12+f.diff)*60,"minute diff across DST");equal(g,c.diff(d,"h",true),(12+f.diff),"hour diff across DST");equal(g,c.diff(d,"d",true),12/24,"day diff across DST");equal(g,c.diff(d,"w",true),12/24/7,"week diff across DST");equal(g,c.diff(d,"M",true),12/24/e,"month diff across DST");equal(g,c.diff(d,"y",true),12/24/e/12,"year diff across DST");g.done()},"diff overflow":function(a){a.expect(4);a.equal(moment([2011]).diff([2010],"months"),12,"month diff");a.equal(moment([2010,0,2]).diff([2010],"hours"),24,"hour diff");a.equal(moment([2010,0,1,2]).diff([2010],"minutes"),120,"minute diff");a.equal(moment([2010,0,1,0,4]).diff([2010],"seconds"),240,"second diff");a.done()},"diff between utc and local":function(a){if(moment([2012]).zone()===moment([2011]).zone()){a.equal(moment([2012]).utc().diff([2011],"years"),1,"year diff")}a.equal(moment([2010,2,2]).utc().diff([2010,0,2],"months"),2,"month diff");a.equal(moment([2010,0,4]).utc().diff([2010],"days"),3,"day diff");a.equal(moment([2010,0,22]).utc().diff([2010],"weeks"),3,"week diff");a.equal(moment([2010,0,1,4]).utc().diff([2010],"hours"),4,"hour diff");a.equal(moment([2010,0,1,0,5]).utc().diff([2010],"minutes"),5,"minute diff");a.equal(moment([2010,0,1,0,0,6]).utc().diff([2010],"seconds"),6,"second diff");a.done()},"diff floored":function(a){a.expect(7);a.equal(moment([2010,0,1,23]).diff([2010],"day"),0,"23 hours = 0 days");a.equal(moment([2010,0,1,23,59]).diff([2010],"day"),0,"23:59 hours = 0 days");a.equal(moment([2010,0,1,24]).diff([2010],"day"),1,"24 hours = 1 day");a.equal(moment([2010,0,2]).diff([2011,0,1],"year"),0,"year rounded down");a.equal(moment([2011,0,1]).diff([2010,0,2],"year"),0,"year rounded down");a.equal(moment([2010,0,2]).diff([2011,0,2],"year"),-1,"year rounded down");a.equal(moment([2011,0,2]).diff([2010,0,2],"year"),1,"year rounded down");a.done()},"year diffs include dates":function(a){a.expect(1);a.ok(moment([2012,1,19]).diff(moment([2002,1,20]),"years",true)<10,"year diff should include date of month");a.done()},"month diffs":function(a){a.expect(8);equal(a,moment([2012,0,1]).diff([2012,1,1],"months",true),-1,"Jan 1 to Feb 1 should be 1 month");equal(a,moment([2012,0,1]).diff([2012,0,1,12],"months",true),-0.5/31,"Jan 1 to Jan 1 noon should be 0.5 / 31 months");equal(a,moment([2012,0,15]).diff([2012,1,15],"months",true),-1,"Jan 15 to Feb 15 should be 1 month");equal(a,moment([2012,0,28]).diff([2012,1,28],"months",true),-1,"Jan 28 to Feb 28 should be 1 month");equal(a,moment([2012,0,31]).diff([2012,1,29],"months",true),-1+(2/30),"Jan 31 to Feb 29 should be 1 - (2 / 30) months");equal(a,moment([2012,0,31]).diff([2012,2,1],"months",true),-2+(30/31),"Jan 31 to Mar 1 should be 2 - (30 / 31) months");equal(a,moment([2012,0,31]).diff([2012,2,1,12],"months",true),-2+(29.5/31),"Jan 31 to Mar 1 should be 2 - (29.5 / 31) months");equal(a,moment([2012,0,1]).diff([2012,0,31],"months",true),-(30/31),"Jan 1 to Jan 31 should be 30 / 31 months");a.done()},"year diffs":function(a){a.expect(10);equal(a,moment([2012,0,1]).diff([2013,0,1],"years",true),-1,"Jan 1 2012 to Jan 1 2013 should be 1 year");equal(a,moment([2012,1,28]).diff([2013,1,28],"years",true),-1,"Feb 28 2012 to Feb 28 2013 should be 1 year");equal(a,moment([2012,2,1]).diff([2013,2,1],"years",true),-1,"Mar 1 2012 to Mar 1 2013 should be 1 year");equal(a,moment([2012,11,1]).diff([2013,11,1],"years",true),-1,"Dec 1 2012 to Dec 1 2013 should be 1 year");equal(a,moment([2012,11,31]).diff([2013,11,31],"years",true),-1,"Dec 31 2012 to Dec 31 2013 should be 1 year");equal(a,moment([2012,0,1]).diff([2013,6,1],"years",true),-1.5,"Jan 1 2012 to Jul 1 2013 should be 1.5 years");equal(a,moment([2012,0,31]).diff([2013,6,31],"years",true),-1.5,"Jan 31 2012 to Jul 31 2013 should be 1.5 years");equal(a,moment([2012,0,1]).diff([2013,0,1,12],"years",true),-1-(0.5/31)/12,"Jan 1 2012 to Jan 1 2013 noon should be 1+(0.5 / 31) / 12 years");equal(a,moment([2012,0,1]).diff([2013,6,1,12],"years",true),-1.5-(0.5/31)/12,"Jan 1 2012 to Jul 1 2013 noon should be 1.5+(0.5 / 31) / 12 years");equal(a,moment([2012,1,29]).diff([2013,1,28],"years",true),-1+(1/28.5)/12,"Feb 29 2012 to Feb 28 2013 should be 1-(1 / 28.5) / 12 years");a.done()}};