describe("Plugin initialization and component basic construction",function(){it("loads jquery plugin properly",function(){expect($("<div>").datetimepicker).toBeDefined();expect(typeof $("<div>").datetimepicker).toEqual("function");expect($("<div>").datetimepicker.defaults).toBeDefined()});it("creates the component with default options on an input element",function(){var b=$("<input>");$(document).find("body").append(b);expect(function(){b=b.datetimepicker()}).not.toThrow();expect(b).not.toBe(null)});xit("calls destroy when Element that the component is attached is removed",function(){var c=$("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append($("<input>"))),d;$(document).find("body").append(c);c.datetimepicker();d=c.data("DateTimePicker");spyOn(d,"destroy").and.callThrough();c.remove();expect(d.destroy).toHaveBeenCalled()})});describe("Public API method tests",function(){var l,k,j,g,h,i;beforeEach(function(){j=jasmine.createSpy("dp.change event Spy");g=jasmine.createSpy("dp.show event Spy");h=jasmine.createSpy("dp.hide event Spy");i=jasmine.createSpy("dp.error event Spy");k=$("<input>").attr("id","dtp");$(document).find("body").append($("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append(k)));$(document).find("body").on("dp.change",j);$(document).find("body").on("dp.show",g);$(document).find("body").on("dp.hide",h);$(document).find("body").on("dp.error",i);k.datetimepicker();l=k.data("DateTimePicker")});afterEach(function(){l.destroy();k.remove()});describe("configuration option name match to public api function",function(){Object.getOwnPropertyNames($.fn.datetimepicker.defaults).forEach(function(a){it("has function "+a+"()",function(){expect(l[a]).toBeDefined()})})});describe("date() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){l.date(null)}).not.toThrow()});it("accepts a string",function(){expect(function(){l.date("2013/05/24")}).not.toThrow()});it("accepts a Date object",function(){expect(function(){l.date(new Date())}).not.toThrow()});it("accepts a Moment object",function(){expect(function(){l.date(moment())}).not.toThrow()});it("does not accept undefined",function(){expect(function(){l.date(undefined)}).toThrow()});it("does not accept a number",function(){expect(function(){l.date(0)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){l.date({})}).toThrow()});it("does not accept a boolean",function(){expect(function(){l.date(false)}).toThrow()})});describe("functionality",function(){it("has no date set upon construction",function(){expect(l.date()).toBe(null)});it("sets the date correctly",function(){var a=moment();l.date(a);expect(l.date().isSame(a)).toBe(true)})})});describe("format() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){l.format(false)}).not.toThrow()});it("accepts a string",function(){expect(function(){l.format("YYYY-MM-DD")}).not.toThrow()});it("does not accept undefined",function(){expect(function(){l.format(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){l.format(true)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){l.format({})}).toThrow()})});describe("functionality",function(){it("returns no format before format is set",function(){expect(l.format()).toBe(false)});it("sets the format correctly",function(){l.format("YYYY-MM-DD");expect(l.format()).toBe("YYYY-MM-DD")})})});describe("destroy() function",function(){describe("existence",function(){it("is defined",function(){expect(l.destroy).toBeDefined()})})});describe("toggle() function",function(){describe("existence",function(){it("is defined",function(){expect(l.toggle).toBeDefined()})})});describe("show() function",function(){describe("existence",function(){it("is defined",function(){expect(l.show).toBeDefined()})});describe("functionality",function(){it("emits a show event when called while widget is hidden",function(){l.show();expect(g).toHaveBeenCalled()});it("does not emit a show event when called and widget is already showing",function(){l.hide();l.show();g.calls.reset();l.show();expect(g).not.toHaveBeenCalled()});it("actually shows the widget",function(){l.show();expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(1)})})});describe("hide() function",function(){describe("existence",function(){it("is defined",function(){expect(l.hide).toBeDefined()})});describe("functionality",function(){it("emits a hide event when called while widget is shown",function(){l.show();l.hide();expect(h).toHaveBeenCalled()});it("does not emit a hide event when called while widget is hidden",function(){l.hide();expect(h).not.toHaveBeenCalled()});it("actually hides the widget",function(){l.show();l.hide();expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(0)})})});describe("disable() function",function(){describe("existence",function(){it("is defined",function(){expect(l.disable).toBeDefined()})})});describe("enable() function",function(){describe("existence",function(){it("is defined",function(){expect(l.enable).toBeDefined()})})});describe("options() function",function(){describe("existence",function(){it("is defined",function(){expect(l.options).toBeDefined()})})});describe("disabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(l.disabledDates).toBeDefined()})})});describe("enabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(l.enabledDates).toBeDefined()})})});describe("daysOfWeekDisabled() function",function(){describe("existence",function(){it("is defined",function(){expect(l.daysOfWeekDisabled).toBeDefined()})})});describe("maxDate() function",function(){describe("existence",function(){it("is defined",function(){expect(l.maxDate).toBeDefined()})})});describe("minDate() function",function(){describe("existence",function(){it("is defined",function(){expect(l.minDate).toBeDefined()})})});describe("defaultDate() function",function(){describe("existence",function(){it("is defined",function(){expect(l.defaultDate).toBeDefined()})});describe("functionality",function(){it("returns no defaultDate before defaultDate is set",function(){expect(l.defaultDate()).toBe(false)});it("sets the defaultDate correctly",function(){var a=moment();l.defaultDate(a);expect(l.defaultDate().isSame(a)).toBe(true);expect(l.date().isSame(a)).toBe(true)});it("triggers a change event upon setting a default date and input field is empty",function(){l.date(null);l.defaultDate(moment());expect(j).toHaveBeenCalled()});it("does not override input value if it already has one",function(){var a=moment();l.date(a);l.defaultDate(moment().year(2000));expect(l.date().isSame(a)).toBe(true)})})});describe("locale() function",function(){describe("functionality",function(){it("it has the same locale as the global moment locale with default options",function(){expect(l.locale()).toBe(moment.locale())});it("it switches to a selected locale without affecting global moment locale",function(){l.locale("el");l.date(moment());expect(l.locale()).toBe("el");expect(l.date().locale()).toBe("el");expect(moment.locale()).toBe("en")})})});describe("useCurrent() function",function(){describe("existence",function(){it("is defined",function(){expect(l.useCurrent).toBeDefined()})});describe("check type and parameter validity",function(){it("accepts either a boolean value or string",function(){var a=["year","month","day","hour","minute"];expect(function(){l.useCurrent(false)}).not.toThrow();expect(function(){l.useCurrent(true)}).not.toThrow();a.forEach(function(b){expect(function(){l.useCurrent(b)}).not.toThrow()});expect(function(){l.useCurrent("test")}).toThrow();expect(function(){l.useCurrent({})}).toThrow()})});describe("functionality",function(){it("triggers a change event upon show() and input field is empty",function(){l.useCurrent(true);l.show();expect(j).toHaveBeenCalled()})})});describe("ignoreReadonly() function",function(){describe("existence",function(){it("is defined",function(){expect(l.ignoreReadonly).toBeDefined()})})});describe("stepping() function",function(){describe("existence",function(){it("is defined",function(){expect(l.stepping).toBeDefined()})})});describe("collapse() function",function(){describe("existence",function(){it("is defined",function(){expect(l.collapse).toBeDefined()})})});describe("icons() function",function(){describe("existence",function(){it("is defined",function(){expect(l.icons).toBeDefined()})})});describe("useStrict() function",function(){describe("existence",function(){it("is defined",function(){expect(l.useStrict).toBeDefined()})})});describe("sideBySide() function",function(){describe("existence",function(){it("is defined",function(){expect(l.sideBySide).toBeDefined()})})});describe("viewMode() function",function(){describe("existence",function(){it("is defined",function(){expect(l.viewMode).toBeDefined()})})});describe("widgetPositioning() function",function(){describe("existence",function(){it("is defined",function(){expect(l.widgetPositioning).toBeDefined()})})});describe("calendarWeeks() function",function(){describe("existence",function(){it("is defined",function(){expect(l.calendarWeeks).toBeDefined()})})});describe("showTodayButton() function",function(){describe("existence",function(){it("is defined",function(){expect(l.showTodayButton).toBeDefined()})})});describe("showClear() function",function(){describe("existence",function(){it("is defined",function(){expect(l.showClear).toBeDefined()})})});describe("dayViewHeaderFormat() function",function(){describe("typechecking",function(){it("does not accept a false value",function(){expect(function(){l.dayViewHeaderFormat(false)}).toThrow()});it("accepts a string",function(){expect(function(){l.dayViewHeaderFormat("YYYY-MM-DD")}).not.toThrow()});it("does not accept undefined",function(){expect(function(){l.dayViewHeaderFormat(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){l.dayViewHeaderFormat(true)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){l.dayViewHeaderFormat({})}).toThrow()})});describe("functionality",function(){it("expects dayViewHeaderFormat to be default of MMMM YYYY",function(){expect(l.dayViewHeaderFormat()).toBe("MMMM YYYY")});it("sets the dayViewHeaderFormat correctly",function(){l.dayViewHeaderFormat("MM YY");expect(l.dayViewHeaderFormat()).toBe("MM YY")})})});describe("extraFormats() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){l.extraFormats(false)}).not.toThrow()});it("does not accept a string",function(){expect(function(){l.extraFormats("YYYY-MM-DD")}).toThrow()});it("does not accept undefined",function(){expect(function(){l.extraFormats(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){l.extraFormats(true)}).toThrow()});it("accepts an Array",function(){expect(function(){l.extraFormats(["YYYY-MM-DD"])}).not.toThrow()})});describe("functionality",function(){it("returns no extraFormats before extraFormats is set",function(){expect(l.extraFormats()).toBe(false)});it("sets the extraFormats correctly",function(){l.extraFormats(["YYYY-MM-DD"]);expect(l.extraFormats()[0]).toBe("YYYY-MM-DD")})})});describe("toolbarPlacement() function",function(){describe("existence",function(){it("is defined",function(){expect(l.toolbarPlacement).toBeDefined()})});describe("check type and parameter validity",function(){it("does not accept a false value",function(){expect(function(){l.dayViewHeaderFormat(false)}).toThrow()});it("does not accept a false value",function(){expect(function(){l.dayViewHeaderFormat(false)}).toThrow()});it("accepts a string",function(){var a=["default","top","bottom"];a.forEach(function(b){expect(function(){l.toolbarPlacement(b)}).not.toThrow()});expect(function(){l.toolbarPlacement("test")}).toThrow();expect(function(){l.toolbarPlacement({})}).toThrow()})})});describe("widgetParent() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){l.widgetParent(null)}).not.toThrow()});it("accepts a string",function(){expect(function(){l.widgetParent("testDiv")}).not.toThrow()});it("accepts a jquery object",function(){expect(function(){l.widgetParent($("#testDiv"))}).not.toThrow()});it("does not accept undefined",function(){expect(function(){l.widgetParent(undefined)}).toThrow()});it("does not accept a number",function(){expect(function(){l.widgetParent(0)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){l.widgetParent({})}).toThrow()});it("does not accept a boolean",function(){expect(function(){l.widgetParent(false)}).toThrow()})})});describe("keepOpen() function",function(){describe("existence",function(){it("is defined",function(){expect(l.keepOpen).toBeDefined()})})});describe("inline() function",function(){describe("existence",function(){it("is defined",function(){expect(l.inline).toBeDefined()})})});describe("clear() function",function(){describe("existence",function(){it("is defined",function(){expect(l.clear).toBeDefined()})})});describe("keyBinds() function",function(){describe("existence",function(){it("is defined",function(){expect(l.keyBinds).toBeDefined()})})})});