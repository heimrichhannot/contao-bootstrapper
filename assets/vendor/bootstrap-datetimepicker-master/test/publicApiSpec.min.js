describe("Plugin initialization and component basic construction",function(){it("loads jquery plugin properly",function(){expect($("<div>").datetimepicker).toBeDefined();expect(typeof $("<div>").datetimepicker).toEqual("function");expect($("<div>").datetimepicker.defaults).toBeDefined()});it("creates the component with default options on an input element",function(){var a=$("<input>");$(document).find("body").append(a);expect(function(){a=a.datetimepicker()}).not.toThrow();expect(a).not.toBe(null)});xit("calls destroy when Element that the component is attached is removed",function(){var b=$("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append($("<input>"))),a;$(document).find("body").append(b);b.datetimepicker();a=b.data("DateTimePicker");spyOn(a,"destroy").and.callThrough();b.remove();expect(a.destroy).toHaveBeenCalled()})});describe("Public API method tests",function(){var c,d,e,b,a,f;beforeEach(function(){e=jasmine.createSpy("dp.change event Spy");b=jasmine.createSpy("dp.show event Spy");a=jasmine.createSpy("dp.hide event Spy");f=jasmine.createSpy("dp.error event Spy");d=$("<input>").attr("id","dtp");$(document).find("body").append($("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append(d)));$(document).find("body").on("dp.change",e);$(document).find("body").on("dp.show",b);$(document).find("body").on("dp.hide",a);$(document).find("body").on("dp.error",f);d.datetimepicker();c=d.data("DateTimePicker")});afterEach(function(){c.destroy();d.remove()});describe("configuration option name match to public api function",function(){Object.getOwnPropertyNames($.fn.datetimepicker.defaults).forEach(function(g){it("has function "+g+"()",function(){expect(c[g]).toBeDefined()})})});describe("date() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){c.date(null)}).not.toThrow()});it("accepts a string",function(){expect(function(){c.date("2013/05/24")}).not.toThrow()});it("accepts a Date object",function(){expect(function(){c.date(new Date())}).not.toThrow()});it("accepts a Moment object",function(){expect(function(){c.date(moment())}).not.toThrow()});it("does not accept undefined",function(){expect(function(){c.date(undefined)}).toThrow()});it("does not accept a number",function(){expect(function(){c.date(0)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){c.date({})}).toThrow()});it("does not accept a boolean",function(){expect(function(){c.date(false)}).toThrow()})});describe("functionality",function(){it("has no date set upon construction",function(){expect(c.date()).toBe(null)});it("sets the date correctly",function(){var g=moment();c.date(g);expect(c.date().isSame(g)).toBe(true)})})});describe("format() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){c.format(false)}).not.toThrow()});it("accepts a string",function(){expect(function(){c.format("YYYY-MM-DD")}).not.toThrow()});it("does not accept undefined",function(){expect(function(){c.format(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){c.format(true)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){c.format({})}).toThrow()})});describe("functionality",function(){it("returns no format before format is set",function(){expect(c.format()).toBe(false)});it("sets the format correctly",function(){c.format("YYYY-MM-DD");expect(c.format()).toBe("YYYY-MM-DD")})})});describe("destroy() function",function(){describe("existence",function(){it("is defined",function(){expect(c.destroy).toBeDefined()})})});describe("toggle() function",function(){describe("existence",function(){it("is defined",function(){expect(c.toggle).toBeDefined()})})});describe("show() function",function(){describe("existence",function(){it("is defined",function(){expect(c.show).toBeDefined()})});describe("functionality",function(){it("emits a show event when called while widget is hidden",function(){c.show();expect(b).toHaveBeenCalled()});it("does not emit a show event when called and widget is already showing",function(){c.hide();c.show();b.calls.reset();c.show();expect(b).not.toHaveBeenCalled()});it("actually shows the widget",function(){c.show();expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(1)})})});describe("hide() function",function(){describe("existence",function(){it("is defined",function(){expect(c.hide).toBeDefined()})});describe("functionality",function(){it("emits a hide event when called while widget is shown",function(){c.show();c.hide();expect(a).toHaveBeenCalled()});it("does not emit a hide event when called while widget is hidden",function(){c.hide();expect(a).not.toHaveBeenCalled()});it("actually hides the widget",function(){c.show();c.hide();expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(0)})})});describe("disable() function",function(){describe("existence",function(){it("is defined",function(){expect(c.disable).toBeDefined()})})});describe("enable() function",function(){describe("existence",function(){it("is defined",function(){expect(c.enable).toBeDefined()})})});describe("options() function",function(){describe("existence",function(){it("is defined",function(){expect(c.options).toBeDefined()})})});describe("disabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(c.disabledDates).toBeDefined()})})});describe("enabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(c.enabledDates).toBeDefined()})})});describe("daysOfWeekDisabled() function",function(){describe("existence",function(){it("is defined",function(){expect(c.daysOfWeekDisabled).toBeDefined()})})});describe("maxDate() function",function(){describe("existence",function(){it("is defined",function(){expect(c.maxDate).toBeDefined()})})});describe("minDate() function",function(){describe("existence",function(){it("is defined",function(){expect(c.minDate).toBeDefined()})})});describe("defaultDate() function",function(){describe("existence",function(){it("is defined",function(){expect(c.defaultDate).toBeDefined()})});describe("functionality",function(){it("returns no defaultDate before defaultDate is set",function(){expect(c.defaultDate()).toBe(false)});it("sets the defaultDate correctly",function(){var g=moment();c.defaultDate(g);expect(c.defaultDate().isSame(g)).toBe(true);expect(c.date().isSame(g)).toBe(true)});it("triggers a change event upon setting a default date and input field is empty",function(){c.date(null);c.defaultDate(moment());expect(e).toHaveBeenCalled()});it("does not override input value if it already has one",function(){var g=moment();c.date(g);c.defaultDate(moment().year(2000));expect(c.date().isSame(g)).toBe(true)})})});describe("locale() function",function(){describe("functionality",function(){it("it has the same locale as the global moment locale with default options",function(){expect(c.locale()).toBe(moment.locale())});it("it switches to a selected locale without affecting global moment locale",function(){c.locale("el");c.date(moment());expect(c.locale()).toBe("el");expect(c.date().locale()).toBe("el");expect(moment.locale()).toBe("en")})})});describe("useCurrent() function",function(){describe("existence",function(){it("is defined",function(){expect(c.useCurrent).toBeDefined()})});describe("check type and parameter validity",function(){it("accepts either a boolean value or string",function(){var g=["year","month","day","hour","minute"];expect(function(){c.useCurrent(false)}).not.toThrow();expect(function(){c.useCurrent(true)}).not.toThrow();g.forEach(function(h){expect(function(){c.useCurrent(h)}).not.toThrow()});expect(function(){c.useCurrent("test")}).toThrow();expect(function(){c.useCurrent({})}).toThrow()})});describe("functionality",function(){it("triggers a change event upon show() and input field is empty",function(){c.useCurrent(true);c.show();expect(e).toHaveBeenCalled()})})});describe("ignoreReadonly() function",function(){describe("existence",function(){it("is defined",function(){expect(c.ignoreReadonly).toBeDefined()})})});describe("stepping() function",function(){describe("existence",function(){it("is defined",function(){expect(c.stepping).toBeDefined()})})});describe("collapse() function",function(){describe("existence",function(){it("is defined",function(){expect(c.collapse).toBeDefined()})})});describe("icons() function",function(){describe("existence",function(){it("is defined",function(){expect(c.icons).toBeDefined()})})});describe("useStrict() function",function(){describe("existence",function(){it("is defined",function(){expect(c.useStrict).toBeDefined()})})});describe("sideBySide() function",function(){describe("existence",function(){it("is defined",function(){expect(c.sideBySide).toBeDefined()})})});describe("viewMode() function",function(){describe("existence",function(){it("is defined",function(){expect(c.viewMode).toBeDefined()})})});describe("widgetPositioning() function",function(){describe("existence",function(){it("is defined",function(){expect(c.widgetPositioning).toBeDefined()})})});describe("calendarWeeks() function",function(){describe("existence",function(){it("is defined",function(){expect(c.calendarWeeks).toBeDefined()})})});describe("showTodayButton() function",function(){describe("existence",function(){it("is defined",function(){expect(c.showTodayButton).toBeDefined()})})});describe("showClear() function",function(){describe("existence",function(){it("is defined",function(){expect(c.showClear).toBeDefined()})})});describe("dayViewHeaderFormat() function",function(){describe("typechecking",function(){it("does not accept a false value",function(){expect(function(){c.dayViewHeaderFormat(false)}).toThrow()});it("accepts a string",function(){expect(function(){c.dayViewHeaderFormat("YYYY-MM-DD")}).not.toThrow()});it("does not accept undefined",function(){expect(function(){c.dayViewHeaderFormat(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){c.dayViewHeaderFormat(true)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){c.dayViewHeaderFormat({})}).toThrow()})});describe("functionality",function(){it("expects dayViewHeaderFormat to be default of MMMM YYYY",function(){expect(c.dayViewHeaderFormat()).toBe("MMMM YYYY")});it("sets the dayViewHeaderFormat correctly",function(){c.dayViewHeaderFormat("MM YY");expect(c.dayViewHeaderFormat()).toBe("MM YY")})})});describe("extraFormats() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){c.extraFormats(false)}).not.toThrow()});it("does not accept a string",function(){expect(function(){c.extraFormats("YYYY-MM-DD")}).toThrow()});it("does not accept undefined",function(){expect(function(){c.extraFormats(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){c.extraFormats(true)}).toThrow()});it("accepts an Array",function(){expect(function(){c.extraFormats(["YYYY-MM-DD"])}).not.toThrow()})});describe("functionality",function(){it("returns no extraFormats before extraFormats is set",function(){expect(c.extraFormats()).toBe(false)});it("sets the extraFormats correctly",function(){c.extraFormats(["YYYY-MM-DD"]);expect(c.extraFormats()[0]).toBe("YYYY-MM-DD")})})});describe("toolbarPlacement() function",function(){describe("existence",function(){it("is defined",function(){expect(c.toolbarPlacement).toBeDefined()})});describe("check type and parameter validity",function(){it("does not accept a false value",function(){expect(function(){c.dayViewHeaderFormat(false)}).toThrow()});it("does not accept a false value",function(){expect(function(){c.dayViewHeaderFormat(false)}).toThrow()});it("accepts a string",function(){var g=["default","top","bottom"];g.forEach(function(h){expect(function(){c.toolbarPlacement(h)}).not.toThrow()});expect(function(){c.toolbarPlacement("test")}).toThrow();expect(function(){c.toolbarPlacement({})}).toThrow()})})});describe("widgetParent() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){c.widgetParent(null)}).not.toThrow()});it("accepts a string",function(){expect(function(){c.widgetParent("testDiv")}).not.toThrow()});it("accepts a jquery object",function(){expect(function(){c.widgetParent($("#testDiv"))}).not.toThrow()});it("does not accept undefined",function(){expect(function(){c.widgetParent(undefined)}).toThrow()});it("does not accept a number",function(){expect(function(){c.widgetParent(0)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){c.widgetParent({})}).toThrow()});it("does not accept a boolean",function(){expect(function(){c.widgetParent(false)}).toThrow()})})});describe("keepOpen() function",function(){describe("existence",function(){it("is defined",function(){expect(c.keepOpen).toBeDefined()})})});describe("inline() function",function(){describe("existence",function(){it("is defined",function(){expect(c.inline).toBeDefined()})})});describe("clear() function",function(){describe("existence",function(){it("is defined",function(){expect(c.clear).toBeDefined()})})});describe("keyBinds() function",function(){describe("existence",function(){it("is defined",function(){expect(c.keyBinds).toBeDefined()})})})});